struct Node {
    int key;
    Node left;
    Node right;
    Node p;//precessor
}

struct BST {
    Node root;
}

Node newNode(int val) {
    Node n = new Node();
    n.key = val;
    n.left = null;
    n.right = null;
    n.p = null;
    return n;
}

BST newBST() {
    BST bst = new BST();
    bst.root = null;
    return bst;
}

void insert_bst (BST T, Node z) {
    Node x = T.root;
    Node y = null;

while (x != null) {
        y = x;
        if (z.key < x.key)
            x = x.left;
        else 
            x = x.right;
    }
    z.p = y;
    if (y==null) {
        T.root = z;
        return;
    }
    if (z.key < y.key) {
        y.left = z;
          return;
    }
    y.right =z;
}

void delete(BST T, Node z) {
    Node y = null;
    if (z.left ==null) {
        transplant(T,z,z.right);
        return;
        }
     if (z.right ==null){
        transplant (T,z,z.left);
        }
    else {
        y = minimum(z.right);
        if (y.p !=z) {
            transplant (T,y,y.right);
            y.right = z.right;
            y.right.p = y;
        }
        transplant (T,z,y);
        y.left = z.left;
        y.left.p = y;
    }
}



Node minimum(Node x) {
    while (x.left !=null)
        x = x.left;
    return x;
}


Node maximum(Node x) {
    while (x.right !=null)
        x = x.right;
    return x;
}

void transplant(BST T, Node u, Node v) {
    if (u.p ==null)
        T.root = v;
    else if (u==u.p.left)
        u.p.left = v;
    else 
        u.p.right = v;
    if (v!=null)
        v.p = u.p;
}

Node search(BST bst, int val) {
    Node n = bst.root;
    while (n!=null && n.key != val) {
        if (val < n.key) 
            n = n.left;
        else 
            n = n.right;
    }
    return n;
}

Node successor(Node x) {
Node y=null;
    if (x.right !=null)
        return minimum(x.right);
    y = x.p;
    while (y!=null && x==y.right) {
        x=y;
        y = y.p;
    }
    return y;
}


