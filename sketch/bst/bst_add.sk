struct Node {
    int key;
    Node left;
    Node right;
    Node p;//precessor
}

struct BST {
    Node root;
}

Node newNode(int val) {
    Node n = new Node();
    n.key = val;
    n.left = null;
    n.right = null;
    n.p = null;
    return n;
}

BST newBST() {
    BST bst = new BST();
    bst.root = null;
    return bst;
}

void insert(BST T,Node z) {
    Node x = T.root;
    Node y = null;

    while (x != null) {
        y = x;
        if (z.key < x.key)
            x = x.left;
        if (z.key >= x.key) 
            x = x.right;
    }
    z.p = y;
    if (y==null) {
        T.root = z;
        return;
    }
    if (z.key < y.key) {
        y.left = z;
          return;
    }
    y.right =z;
}

void delete(BST T,Node z) {
    if (z.left ==null) {
        transplant(T,z,z.right);
        return;
        }
     if (z.right ==null){
        transplant (T,z,z.left);
        }
    else {
        y = minimum(z.right);
        if (y.p !=z) {
            translant (T,y,y.right);
            y.right = z.right;
            y.right.p = y;
        }
        transplant (T,z,y);
        y.left = z.left;
        y.left.p = y;
    }
}

Node minimum(Node x) {
    while (x.left !=null)
        x = x.left;
    return x;
}


Node maximum(Node x) {
    while (x.right !=null)
        x = x.right;
    return x;
}

void transplant(BST T, Node u, Node v) {
    if (u.p ==null)
        T.root = v;
    else if (u==u.p.left)
        u.p.left = v;
    else 
        u.p.right = v;
    if (v!=null)
        v.p = u.p;
}

Node search(BST bst, int val) {
    Node n = bst.root;
    while (n!=null && n.value != val) {
        if (val < n.value) 
            n = n.left;
        else 
            n = n.right;
    }
    return n;
}

Node successor(Node x) {
    if (x.right !=null)
        return minimum(x.right);
    y = x.p;
    while (y!=null && x==y.right) {
        x=y;
        y = y.p;
    }
    return y;
}

harness void insertHarness() {
    BST bst = newBST();
    //insert 12
    Node twelve = newNode(12);
    insert(bst,twelve);
    assert bst.root == twelve;
    assert bst.root.left == null;
    assert bst.root.right ==null;
    //insert 18
    Node eighteen = newNode(18);
    insert(bst,eighteen);
    assert bst.root == twelve;
    assert bst.root.right == eighteen;
    
        //insert 15
    Node fifteen = newNode(15);
        insert(bst,fifteen);
    assert bst.root == twelve;
    assert bst.root.right == eighteen;
    assert eighteen.left == fifteen;
    
        //insert 5
    Node five = newNode(5);
        insert(bst,five);
    assert bst.root == twelve;
    assert bst.root.left == five;
    
        //insert 9
    Node nine == newNode(9);
        insert(bst,nine);
    assert bst.root == twelve;
    assert bst.root.left == five;
    assert five.right ==nine;
    
    
    //insert 19
    Node nineteen = newNode(19);
    insert(bst,nineteen);
    assert bst.root == twelve;
    assert bst.root.right == eighteen;
    assert eighteen.right ==nineteen;
    //insert 13
    Node thirteen = newNode(13);
        insert(bst,thirteen);
    assert bst.root.right == eighteen;
    assert eighteen.left == fifteen;
    assert fifteen.left == thirteen;
    
        //insert 2
    Node two = newNode(2);
        insert(bst,two);
    assert bst.root.left == five;
    assert five.left == two;
    
        //insert 17
    Node seventeen = newNode(17);
        insert(bst,seventeen);
    assert bst.root.right == eighteen;
    assert eighteen.left == fifteen;
    assert fifteen.right == seventeen;
    
}

harness void deleteHarness() {
BST bst = insertTestHelper();
}
harness void searchHarness() {

}

BST insertTestHelper() {
 BST bst = newBST();
 int[9] arr = {12,18,5,19,15,2,17,13,9};
 for (int i=0;i<9;i++) {
 Node n = newNode(i);
 insert (bst,n);
 }
 return bst;
}


