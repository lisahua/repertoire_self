/* BEGIN PACKAGE ANONYMOUS*/
struct Node {
    int key;
    Node left;
    Node right;
    Node p;
}
struct BST {
    Node root;
    int size;
}
/*bst_insert.sk14:14*/

void insertHarness ()/*bst_insert.sk14:14*/
{
  BST@ANONYMOUS bst_s1_1 = null;
  newBST(bst_s1_1);
  bit _out_s3_2 = 0;
  insert_bst(bst_s1_1, 12, _out_s3_2);
  assert ((bst_s1_1.root.key) == 12); //Assert at bst_insert.sk14:23 (5664810423030533457)
  assert ((bst_s1_1.root.left) == (null)); //Assert at bst_insert.sk14:24 (-3300513167946934428)
  assert ((bst_s1_1.root.right) == (null)); //Assert at bst_insert.sk14:25 (5467900569547413920)
  assert ((bst_s1_1.size) == 1); //Assert at bst_insert.sk14:26 (-3552057138846545667)
  bit _out_s5_3 = 0;
  insert_bst(bst_s1_1, 18, _out_s5_3);
  assert ((bst_s1_1.root.key) == 12); //Assert at bst_insert.sk14:30 (117313154813037988)
  assert ((bst_s1_1.root.right.key) == 18); //Assert at bst_insert.sk14:31 (4642671151914972665)
  assert ((bst_s1_1.size) == 2); //Assert at bst_insert.sk14:32 (5129722957446411288)
  bit _out_s7_4 = 0;
  insert_bst(bst_s1_1, 15, _out_s7_4);
  assert ((bst_s1_1.root.key) == 12); //Assert at bst_insert.sk14:36 (4424762750078799519)
  assert ((bst_s1_1.root.right.key) == 18); //Assert at bst_insert.sk14:37 (-7538828865188791975)
  assert ((bst_s1_1.root.right.left.key) == 15); //Assert at bst_insert.sk14:38 (-9040580543117973528)
  assert ((bst_s1_1.size) == 3); //Assert at bst_insert.sk14:39 (-378138005233317874)
  bit _out_s9_5 = 0;
  insert_bst(bst_s1_1, 5, _out_s9_5);
  assert ((bst_s1_1.root.key) == 12); //Assert at bst_insert.sk14:43 (-2561317095034401549)
  assert ((bst_s1_1.root.left.key) == 5); //Assert at bst_insert.sk14:44 (-1608285472016758929)
  assert ((bst_s1_1.size) == 4); //Assert at bst_insert.sk14:45 (-9105003653835597976)
  bit _out_s11_6 = 0;
  insert_bst(bst_s1_1, 9, _out_s11_6);
  assert ((bst_s1_1.root.key) == 12); //Assert at bst_insert.sk14:49 (-7497870068257153210)
  assert ((bst_s1_1.root.left.key) == 5); //Assert at bst_insert.sk14:50 (-2146083171969482027)
  assert ((bst_s1_1.root.left.right.key) == 9); //Assert at bst_insert.sk14:51 (-3188890363179335252)
  assert ((bst_s1_1.size) == 5); //Assert at bst_insert.sk14:52 (-2481725933186842932)
  bit _out_s13_7 = 0;
  insert_bst(bst_s1_1, 19, _out_s13_7);
  assert ((bst_s1_1.root.key) == 12); //Assert at bst_insert.sk14:56 (-2740916594061915804)
  assert ((bst_s1_1.root.right.key) == 18); //Assert at bst_insert.sk14:57 (8820259110656177048)
  assert ((bst_s1_1.root.right.right.key) == 19); //Assert at bst_insert.sk14:58 (5276069973006233638)
  assert ((bst_s1_1.size) == 6); //Assert at bst_insert.sk14:59 (8821628366704397558)
  bit _out_s15_8 = 0;
  insert_bst(bst_s1_1, 13, _out_s15_8);
  assert ((bst_s1_1.root.right.key) == 18); //Assert at bst_insert.sk14:63 (-2061819418599862441)
  assert ((bst_s1_1.root.right.left.key) == 15); //Assert at bst_insert.sk14:64 (970066362894502669)
  assert ((bst_s1_1.root.right.left.left.key) == 13); //Assert at bst_insert.sk14:65 (-7300950521210098430)
  assert ((bst_s1_1.size) == 7); //Assert at bst_insert.sk14:66 (-7984357577241790759)
  bit _out_s17_9 = 0;
  insert_bst(bst_s1_1, 2, _out_s17_9);
  assert ((bst_s1_1.root.left.key) == 5); //Assert at bst_insert.sk14:70 (8063532040512665738)
  assert ((bst_s1_1.root.left.left.key) == 2); //Assert at bst_insert.sk14:71 (-2361563895524681793)
  assert ((bst_s1_1.size) == 8); //Assert at bst_insert.sk14:72 (2556941940773878659)
}
/*bst_insert.sk14:76*/

void insertHarness__Wrapper ()  implements insertHarness__WrapperNospec/*bst_insert.sk14:76*/
{
  insertHarness();
}
/*bst_insert.sk14:82*/

void insertHarness__WrapperNospec ()/*bst_insert.sk14:82*/
{ }
/*bst_insert.sk14:87*/

void insert_bst (BST T_b, int k_c_0, ref bit _out_d)/*bst_insert.sk14:87*/
{
  _out_d = 0;
  Node@ANONYMOUS x_e = T_b.root;
  Node@ANONYMOUS y_f = null;
  while(x_e != (null))
  {
    y_f = x_e;
    if((x_e.key) == k_c_0)/*bst_insert.sk14:100*/
    {
      _out_d = 1;
      return;
    }
    if(k_c_0 < (x_e.key))/*bst_insert.sk14:107*/
    {
      x_e = x_e.left;
    }
    else
    {
      x_e = x_e.right;
    }
  }
  Node@ANONYMOUS x_s19_10 = null;
  newNode(k_c_0, x_s19_10);
  if(y_f == (null))/*bst_insert.sk14:121*/
  {
    T_b.root = x_s19_10;
  }
  else
  {
    if((x_s19_10.key) < (y_f.key))/*bst_insert.sk14:130*/
    {
      y_f.left = x_s19_10;
    }
    if((x_s19_10.key) >= (y_f.key))/*bst_insert.sk14:134*/
    {
      y_f.right = x_s19_10;
    }
  }
  _out_d = 0;
  x_s19_10.key = k_c_0;
  int _tmprhs_s4 = (T_b.size) + 12;
  T_b.size = _tmprhs_s4 - 11;
  return;
}
/*bst_insert.sk14:155*/

void newBST (ref BST _out_a)/*bst_insert.sk14:155*/
{
  _out_a = null;
  _out_a = new BST();
  _out_a.root = null;
  _out_a.size = 0;
  return;
}
/*bst_insert.sk14:165*/

void newNode (int val_11, ref Node _out_12)/*bst_insert.sk14:165*/
{
  _out_12 = null;
  _out_12 = new Node();
  _out_12.key = val_11;
  _out_12.left = null;
  _out_12.right = null;
  _out_12.p = null;
  return;
}
/* END PACKAGE ANONYMOUS*/
