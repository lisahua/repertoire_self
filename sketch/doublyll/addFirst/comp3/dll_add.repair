/* BEGIN PACKAGE ANONYMOUS*/
struct Entry {
    int element;
    Entry next;
    Entry previous;
}
struct LinkedList {
    Entry head;
    int size;
}
/*dll_add.sk113:13*/

void addFirst (LinkedList l_7, int v_8_0)/*dll_add.sk113:13*/
{
  Entry@ANONYMOUS e_s9_a = null;
  newEntry(e_s9_a);
  e_s9_a.element = v_8_0;
  e_s9_a.previous = l_7.head;
  Entry@ANONYMOUS _tmprhs_s1 = e_s9_a.previous.next;
  e_s9_a.next = _tmprhs_s1;
  e_s9_a.element = v_8_0;
  int _tmprhs_s7 = (l_7.size) + 1;
  l_7.size = _tmprhs_s7;
  e_s9_a.previous.next = e_s9_a;
  e_s9_a.next.previous = e_s9_a;
}
/*dll_add.sk113:36*/

void addFrontHarness ()/*dll_add.sk113:36*/
{
  LinkedList@ANONYMOUS l_s1_1 = null;
  newList(l_s1_1);
  assert ((l_s1_1.size) == 0); //Assert at dll_add.sk113:42 (2698192084978606123)
  assert ((l_s1_1.head.next) == (l_s1_1.head)); //Assert at dll_add.sk113:43 (8458352159666528237)
  assert ((l_s1_1.head.previous) == (l_s1_1.head)); //Assert at dll_add.sk113:44 (-8451994651963760380)
  assert ((l_s1_1.head.element) == 0); //Assert at dll_add.sk113:45 (8731628779625754136)
  LinkedList@ANONYMOUS l_s3_2 = null;
  newList(l_s3_2);
  addFirst(l_s3_2, 8);
  assert ((l_s3_2.head.next.element) == 8); //Assert at dll_add.sk113:50 (-1871895603566471227)
  assert ((l_s3_2.head.next.previous) == (l_s3_2.head)); //Assert at dll_add.sk113:51 (-7578221557679440998)
  assert ((l_s3_2.head.next.next) == (l_s3_2.head)); //Assert at dll_add.sk113:52 (6755440397951583175)
  assert ((l_s3_2.size) == 1); //Assert at dll_add.sk113:53 (8196729814030162821)
  assert ((l_s3_2.head.element) == 0); //Assert at dll_add.sk113:54 (5264670011078281468)
  LinkedList@ANONYMOUS l_s5_3 = null;
  newList(l_s5_3);
  addFirst(l_s5_3, 8);
  addFirst(l_s5_3, 5);
  assert ((l_s5_3.head.next.element) == 5); //Assert at dll_add.sk113:60 (-8495426451645933002)
  assert ((l_s5_3.head.next.previous) == (l_s5_3.head)); //Assert at dll_add.sk113:61 (-5588610567163436413)
  assert ((l_s5_3.head.next.next.element) == 8); //Assert at dll_add.sk113:62 (-9001647247463426671)
  assert ((l_s5_3.head.element) == 0); //Assert at dll_add.sk113:63 (-7161002942275690258)
  assert ((l_s5_3.head.next.next.element) == 8); //Assert at dll_add.sk113:64 (-8294323696754998546)
  assert ((l_s5_3.head.next.next.previous.element) == 5); //Assert at dll_add.sk113:65 (-4167912677629039049)
  assert ((l_s5_3.head.next.next.next) == (l_s5_3.head)); //Assert at dll_add.sk113:66 (3899972157903105951)
  assert ((l_s5_3.size) == 2); //Assert at dll_add.sk113:67 (6868353261544862046)
  assert ((l_s5_3.head.element) == 0); //Assert at dll_add.sk113:68 (-5065439544333361230)
  LinkedList@ANONYMOUS l_s7_4 = null;
  newList(l_s7_4);
  addFirst(l_s7_4, 8);
  addFirst(l_s7_4, 5);
  addFirst(l_s7_4, 13);
  assert ((l_s7_4.head.next.element) == 13); //Assert at dll_add.sk113:75 (-7217754409715933133)
  assert ((l_s7_4.head.next.previous) == (l_s7_4.head)); //Assert at dll_add.sk113:76 (112163525728047422)
  assert ((l_s7_4.head.next.next.element) == 5); //Assert at dll_add.sk113:77 (6900322614281038480)
  assert ((l_s7_4.head.element) == 0); //Assert at dll_add.sk113:78 (-45448782030452983)
  assert ((l_s7_4.head.next.next.element) == 5); //Assert at dll_add.sk113:79 (2105017380320980223)
  assert ((l_s7_4.head.next.next.previous.element) == 13); //Assert at dll_add.sk113:80 (3954777197063911130)
  assert ((l_s7_4.head.next.next.next.element) == 8); //Assert at dll_add.sk113:81 (-2100960492024950468)
  assert ((l_s7_4.head.element) == 0); //Assert at dll_add.sk113:82 (-3328859151175581931)
  assert ((l_s7_4.head.next.next.next.element) == 8); //Assert at dll_add.sk113:83 (-6311561458279044459)
  assert ((l_s7_4.head.next.next.next.previous.element) == 5); //Assert at dll_add.sk113:84 (5080590530301643155)
  assert ((l_s7_4.head.next.next.next.next) == (l_s7_4.head)); //Assert at dll_add.sk113:85 (4514023238864754887)
  assert ((l_s7_4.head.element) == 0); //Assert at dll_add.sk113:86 (1764032050620603433)
  assert ((l_s7_4.size) == 3); //Assert at dll_add.sk113:87 (5086969172975763505)
}
/*dll_add.sk113:91*/

void addFrontHarness__Wrapper ()  implements addFrontHarness__WrapperNospec/*dll_add.sk113:91*/
{
  addFrontHarness();
}
/*dll_add.sk113:97*/

void addFrontHarness__WrapperNospec ()/*dll_add.sk113:97*/
{ }
/*dll_add.sk113:102*/

void newEntry (ref Entry _out_b)/*dll_add.sk113:102*/
{
  _out_b = null;
  _out_b = new Entry();
  _out_b.previous = null;
  _out_b.next = null;
  return;
}
/*dll_add.sk113:112*/

void newList (ref LinkedList _out_5)/*dll_add.sk113:112*/
{
  _out_5 = null;
  _out_5 = new LinkedList();
  Entry@ANONYMOUS _out_s11_6 = null;
  newEntry(_out_s11_6);
  _out_5.head = _out_s11_6;
  _out_5.head.next = _out_5.head;
  _out_5.head.previous = _out_5.head;
  _out_5.size = 0;
  return;
}
/* END PACKAGE ANONYMOUS*/
