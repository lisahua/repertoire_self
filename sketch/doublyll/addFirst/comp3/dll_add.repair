/* BEGIN PACKAGE ANONYMOUS*/
struct Entry {
    int element;
    Entry next;
    Entry previous;
}
struct LinkedList {
    Entry head;
    int size;
}
/*dll_add.sk71:13*/

void addFirst (LinkedList l_7, int v_8_0)/*dll_add.sk71:13*/
{
  Entry@ANONYMOUS e_s9_a = null;
  newEntry(e_s9_a);
  e_s9_a.element = v_8_0;
  e_s9_a.next = l_7.head.next;
  e_s9_a.previous = l_7.head;
  e_s9_a.next.previous = e_s9_a;
  l_7.head.next = e_s9_a;
  e_s9_a.element = v_8_0;
  int _tmprhs_s7 = (l_7.size) + 1;
  l_7.size = _tmprhs_s7;
}
/*dll_add.sk71:36*/

void addFrontHarness ()/*dll_add.sk71:36*/
{
  LinkedList@ANONYMOUS l_s1_1 = null;
  newList(l_s1_1);
  assert ((l_s1_1.size) == 0); //Assert at dll_add.sk71:42 (-3827894261566158781)
  assert ((l_s1_1.head.next) == (l_s1_1.head)); //Assert at dll_add.sk71:43 (3168312411460790985)
  assert ((l_s1_1.head.previous) == (l_s1_1.head)); //Assert at dll_add.sk71:44 (-5697694109605130022)
  LinkedList@ANONYMOUS l_s3_2 = null;
  newList(l_s3_2);
  addFirst(l_s3_2, 8);
  assert ((l_s3_2.head.next.element) == 8); //Assert at dll_add.sk71:49 (1056413257892285912)
  assert ((l_s3_2.head.next.previous) == (l_s3_2.head)); //Assert at dll_add.sk71:50 (-952149409740518617)
  assert ((l_s3_2.head.next.next) == (l_s3_2.head)); //Assert at dll_add.sk71:51 (1583011866891995618)
  assert ((l_s3_2.size) == 1); //Assert at dll_add.sk71:52 (4988454128137650620)
  LinkedList@ANONYMOUS l_s5_3 = null;
  newList(l_s5_3);
  addFirst(l_s5_3, 8);
  addFirst(l_s5_3, 5);
  assert ((l_s5_3.head.next.element) == 5); //Assert at dll_add.sk71:58 (9067433179842671316)
  assert ((l_s5_3.head.next.previous) == (l_s5_3.head)); //Assert at dll_add.sk71:59 (-4628838067993964806)
  assert ((l_s5_3.head.next.next.element) == 8); //Assert at dll_add.sk71:60 (-7556211551366469064)
  assert ((l_s5_3.head.next.next.element) == 8); //Assert at dll_add.sk71:61 (-3868508576068639283)
  assert ((l_s5_3.head.next.next.previous.element) == 5); //Assert at dll_add.sk71:62 (-7045884407193068584)
  assert ((l_s5_3.head.next.next.next) == (l_s5_3.head)); //Assert at dll_add.sk71:63 (-6615643929985233068)
  assert ((l_s5_3.size) == 2); //Assert at dll_add.sk71:64 (5230445720521358027)
  LinkedList@ANONYMOUS l_s7_4 = null;
  newList(l_s7_4);
  addFirst(l_s7_4, 8);
  addFirst(l_s7_4, 5);
  addFirst(l_s7_4, 13);
  assert ((l_s7_4.head.next.element) == 13); //Assert at dll_add.sk71:71 (-6390606561825501883)
  assert ((l_s7_4.head.next.previous) == (l_s7_4.head)); //Assert at dll_add.sk71:72 (2729539810242555006)
  assert ((l_s7_4.head.next.next.element) == 5); //Assert at dll_add.sk71:73 (8981432719974740536)
  assert ((l_s7_4.head.next.next.element) == 5); //Assert at dll_add.sk71:74 (169804916903686335)
  assert ((l_s7_4.head.next.next.previous.element) == 13); //Assert at dll_add.sk71:75 (345805903942545555)
  assert ((l_s7_4.head.next.next.next.element) == 8); //Assert at dll_add.sk71:76 (4623530522831116156)
  assert ((l_s7_4.head.next.next.next.element) == 8); //Assert at dll_add.sk71:77 (-3321718882917924596)
  assert ((l_s7_4.head.next.next.next.previous.element) == 5); //Assert at dll_add.sk71:78 (-8331773754443642993)
  assert ((l_s7_4.head.next.next.next.next) == (l_s7_4.head)); //Assert at dll_add.sk71:79 (-8001882362817876906)
  assert ((l_s7_4.size) == 3); //Assert at dll_add.sk71:80 (-8330664767333090302)
}
/*dll_add.sk71:84*/

void addFrontHarness__Wrapper ()  implements addFrontHarness__WrapperNospec/*dll_add.sk71:84*/
{
  addFrontHarness();
}
/*dll_add.sk71:90*/

void addFrontHarness__WrapperNospec ()/*dll_add.sk71:90*/
{ }
/*dll_add.sk71:95*/

void newEntry (ref Entry _out_b)/*dll_add.sk71:95*/
{
  _out_b = null;
  _out_b = new Entry();
  _out_b.previous = null;
  _out_b.next = null;
  return;
}
/*dll_add.sk71:105*/

void newList (ref LinkedList _out_5)/*dll_add.sk71:105*/
{
  _out_5 = null;
  _out_5 = new LinkedList();
  Entry@ANONYMOUS _out_s11_6 = null;
  newEntry(_out_s11_6);
  _out_5.head = _out_s11_6;
  _out_5.head.next = _out_5.head;
  _out_5.head.previous = _out_5.head;
  _out_5.size = 0;
  return;
}
/* END PACKAGE ANONYMOUS*/
