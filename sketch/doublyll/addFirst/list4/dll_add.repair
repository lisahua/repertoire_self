/* BEGIN PACKAGE ANONYMOUS*/
struct Entry {
    int element;
    Entry next;
    Entry previous;
}
struct LinkedList {
    Entry head;
    int size;
}
/*dll_add.sk3:13*/

void addFirst (LinkedList l_7, int v_8)/*dll_add.sk3:13*/
{
  Entry@ANONYMOUS e_s9_a = null;
  newEntry(e_s9_a);
  Entry@ANONYMOUS in_s11_c = null;
  newEntry(in_s11_c);
  e_s9_a.element = v_8;
  e_s9_a.next = l_7.head.next;
  Entry@ANONYMOUS _tmprhs_s1 = l_7.head;
  e_s9_a.previous = _tmprhs_s1;
  e_s9_a.previous.next = e_s9_a;
  e_s9_a.next.previous = e_s9_a;
  l_7.size = (l_7.size) + 1;
}
/*dll_add.sk3:36*/

void addFrontHarness ()/*dll_add.sk3:36*/
{
  LinkedList@ANONYMOUS l_s1_1 = null;
  newList(l_s1_1);
  assert ((l_s1_1.size) == 0); //Assert at dll_add.sk3:42 (1671996500088336347)
  assert ((l_s1_1.head.next) == (l_s1_1.head)); //Assert at dll_add.sk3:43 (7782172649681784327)
  assert ((l_s1_1.head.previous) == (l_s1_1.head)); //Assert at dll_add.sk3:44 (-4317155995056721053)
  LinkedList@ANONYMOUS l_s3_2 = null;
  newList(l_s3_2);
  addFirst(l_s3_2, 8);
  assert ((l_s3_2.head.next.element) == 8); //Assert at dll_add.sk3:49 (-8441156493580009889)
  assert ((l_s3_2.head.next.previous) == (l_s3_2.head)); //Assert at dll_add.sk3:50 (4726952745964206998)
  assert ((l_s3_2.head.next.next) == (l_s3_2.head)); //Assert at dll_add.sk3:51 (-2534185523338623251)
  assert ((l_s3_2.size) == 1); //Assert at dll_add.sk3:52 (-872073929273754970)
  LinkedList@ANONYMOUS l_s5_3 = null;
  newList(l_s5_3);
  addFirst(l_s5_3, 8);
  addFirst(l_s5_3, 5);
  assert ((l_s5_3.head.next.element) == 5); //Assert at dll_add.sk3:58 (-2922532194043907430)
  assert ((l_s5_3.head.next.previous) == (l_s5_3.head)); //Assert at dll_add.sk3:59 (-8103160317520112362)
  assert ((l_s5_3.head.next.next.element) == 8); //Assert at dll_add.sk3:60 (2433888965226327450)
  assert ((l_s5_3.head.next.next.element) == 8); //Assert at dll_add.sk3:61 (-7131754811954926944)
  assert ((l_s5_3.head.next.next.previous.element) == 5); //Assert at dll_add.sk3:62 (5682396867677720791)
  assert ((l_s5_3.head.next.next.next) == (l_s5_3.head)); //Assert at dll_add.sk3:63 (2466406630797679177)
  assert ((l_s5_3.size) == 2); //Assert at dll_add.sk3:64 (-2213004353877862748)
  LinkedList@ANONYMOUS l_s7_4 = null;
  newList(l_s7_4);
  addFirst(l_s7_4, 8);
  addFirst(l_s7_4, 5);
  addFirst(l_s7_4, 13);
  assert ((l_s7_4.head.next.element) == 13); //Assert at dll_add.sk3:71 (990642300372469431)
  assert ((l_s7_4.head.next.previous) == (l_s7_4.head)); //Assert at dll_add.sk3:72 (-5073063753431021863)
  assert ((l_s7_4.head.next.next.element) == 5); //Assert at dll_add.sk3:73 (-648835732432537796)
  assert ((l_s7_4.head.next.next.element) == 5); //Assert at dll_add.sk3:74 (-5269902743332237200)
  assert ((l_s7_4.head.next.next.previous.element) == 13); //Assert at dll_add.sk3:75 (-672019705865426925)
  assert ((l_s7_4.head.next.next.next.element) == 8); //Assert at dll_add.sk3:76 (-8537496472980337185)
  assert ((l_s7_4.head.next.next.next.element) == 8); //Assert at dll_add.sk3:77 (710483149956156830)
  assert ((l_s7_4.head.next.next.next.previous.element) == 5); //Assert at dll_add.sk3:78 (-1894664776813581677)
  assert ((l_s7_4.head.next.next.next.next) == (l_s7_4.head)); //Assert at dll_add.sk3:79 (-1279742127909436601)
  assert ((l_s7_4.size) == 3); //Assert at dll_add.sk3:80 (-2482125207238280268)
}
/*dll_add.sk3:84*/

void addFrontHarness__Wrapper ()  implements addFrontHarness__WrapperNospec/*dll_add.sk3:84*/
{
  addFrontHarness();
}
/*dll_add.sk3:90*/

void addFrontHarness__WrapperNospec ()/*dll_add.sk3:90*/
{ }
/*dll_add.sk3:95*/

void newEntry (ref Entry _out_d)/*dll_add.sk3:95*/
{
  _out_d = null;
  _out_d = new Entry();
  _out_d.previous = null;
  _out_d.next = null;
  return;
}
/*dll_add.sk3:105*/

void newList (ref LinkedList _out_5)/*dll_add.sk3:105*/
{
  _out_5 = null;
  _out_5 = new LinkedList();
  Entry@ANONYMOUS _out_s13_6 = null;
  newEntry(_out_s13_6);
  _out_5.head = _out_s13_6;
  _out_5.head.next = _out_5.head;
  _out_5.head.previous = _out_5.head;
  _out_5.size = 0;
  return;
}
/* END PACKAGE ANONYMOUS*/
