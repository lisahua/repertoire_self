/* BEGIN PACKAGE ANONYMOUS*/
struct Entry {
    int element;
    Entry next;
    Entry previous;
}
struct LinkedList {
    Entry head;
    int size;
}
/*dll_add.sk6:13*/

void addLast (LinkedList l_7, int v_8_0)/*dll_add.sk6:13*/
{
  Entry@ANONYMOUS e_s9_a = null;
  newEntry(e_s9_a);
  e_s9_a.element = v_8_0;
  e_s9_a.next = l_7.head;
  e_s9_a.previous = l_7.head.previous;
  e_s9_a.previous.next = e_s9_a;
  e_s9_a.next.previous = e_s9_a;
  int _tmprhs_s1 = e_s9_a.next.element;
  e_s9_a.element = _tmprhs_s1;
  int _tmprhs_s4 = (l_7.size) + 1;
  l_7.size = _tmprhs_s4;
  e_s9_a.element = v_8_0 - 0;
}
/*dll_add.sk6:36*/

void addLastHarness ()/*dll_add.sk6:36*/
{
  LinkedList@ANONYMOUS l_s1_1 = null;
  newList(l_s1_1);
  assert ((l_s1_1.size) == 0); //Assert at dll_add.sk6:42 (-3426280754476307035)
  assert ((l_s1_1.head.next) == (l_s1_1.head)); //Assert at dll_add.sk6:43 (4578788263212398944)
  assert ((l_s1_1.head.previous) == (l_s1_1.head)); //Assert at dll_add.sk6:44 (7147932123621927942)
  LinkedList@ANONYMOUS l_s3_2 = null;
  newList(l_s3_2);
  addLast(l_s3_2, 8);
  assert ((l_s3_2.head.next.element) == 8); //Assert at dll_add.sk6:49 (-4946348695367043310)
  assert ((l_s3_2.head.next.previous) == (l_s3_2.head)); //Assert at dll_add.sk6:50 (-2522297830554759220)
  assert ((l_s3_2.head.next.next) == (l_s3_2.head)); //Assert at dll_add.sk6:51 (-7958002077015804565)
  assert ((l_s3_2.size) == 1); //Assert at dll_add.sk6:52 (-804958615777731570)
  LinkedList@ANONYMOUS l_s5_3 = null;
  newList(l_s5_3);
  addLast(l_s5_3, 8);
  addLast(l_s5_3, 5);
  assert ((l_s5_3.head.next.element) == 8); //Assert at dll_add.sk6:58 (8287069061846952003)
  assert ((l_s5_3.head.next.previous) == (l_s5_3.head)); //Assert at dll_add.sk6:59 (7056396393436905938)
  assert ((l_s5_3.head.next.next.element) == 5); //Assert at dll_add.sk6:60 (3576109026772993106)
  assert ((l_s5_3.head.next.next.element) == 5); //Assert at dll_add.sk6:61 (-7400695919650835891)
  assert ((l_s5_3.head.next.next.previous.element) == 8); //Assert at dll_add.sk6:62 (8467640370327164315)
  assert ((l_s5_3.head.next.next.next) == (l_s5_3.head)); //Assert at dll_add.sk6:63 (9103469602830406734)
  assert ((l_s5_3.size) == 2); //Assert at dll_add.sk6:64 (38856516961833901)
  LinkedList@ANONYMOUS l_s7_4 = null;
  newList(l_s7_4);
  addLast(l_s7_4, 8);
  addLast(l_s7_4, 5);
  addLast(l_s7_4, 13);
  assert ((l_s7_4.head.next.element) == 8); //Assert at dll_add.sk6:71 (-1815463963827284544)
  assert ((l_s7_4.head.next.previous) == (l_s7_4.head)); //Assert at dll_add.sk6:72 (-8879387812953179732)
  assert ((l_s7_4.head.next.next.element) == 5); //Assert at dll_add.sk6:73 (-5220397332668373776)
  assert ((l_s7_4.head.next.next.element) == 5); //Assert at dll_add.sk6:74 (-5615838218767333544)
  assert ((l_s7_4.head.next.next.previous.element) == 8); //Assert at dll_add.sk6:75 (-3110377926094839104)
  assert ((l_s7_4.head.next.next.next.element) == 13); //Assert at dll_add.sk6:76 (-1760432463543360249)
  assert ((l_s7_4.head.next.next.next.element) == 13); //Assert at dll_add.sk6:77 (-1128220087281035916)
  assert ((l_s7_4.head.next.next.next.previous.element) == 5); //Assert at dll_add.sk6:78 (422428488642240356)
  assert ((l_s7_4.head.next.next.next.next) == (l_s7_4.head)); //Assert at dll_add.sk6:79 (-180616317116410423)
  assert ((l_s7_4.size) == 3); //Assert at dll_add.sk6:80 (4416007796737592629)
}
/*dll_add.sk6:84*/

void addLastHarness__Wrapper ()  implements addLastHarness__WrapperNospec/*dll_add.sk6:84*/
{
  addLastHarness();
}
/*dll_add.sk6:90*/

void addLastHarness__WrapperNospec ()/*dll_add.sk6:90*/
{ }
/*dll_add.sk6:95*/

void newEntry (ref Entry _out_b)/*dll_add.sk6:95*/
{
  _out_b = null;
  _out_b = new Entry();
  _out_b.previous = null;
  _out_b.next = null;
  return;
}
/*dll_add.sk6:105*/

void newList (ref LinkedList _out_5)/*dll_add.sk6:105*/
{
  _out_5 = null;
  _out_5 = new LinkedList();
  Entry@ANONYMOUS _out_s11_6 = null;
  newEntry(_out_s11_6);
  _out_5.head = _out_s11_6;
  _out_5.head.next = _out_5.head;
  _out_5.head.previous = _out_5.head;
  _out_5.size = 0;
  return;
}
/* END PACKAGE ANONYMOUS*/
