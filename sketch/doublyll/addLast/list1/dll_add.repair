/* BEGIN PACKAGE ANONYMOUS*/
struct Entry {
    int element;
    Entry next;
    Entry previous;
}
struct LinkedList {
    Entry head;
    int size;
}
/*dll_add.sk11:13*/

void addLast (LinkedList l_7_7, int v_8_8)/*dll_add.sk11:13*/
{
  Entry@ANONYMOUS e_s9_a_a = null;
  newEntry(e_s9_a_a);
  e_s9_a_a.element = v_8_8;
  e_s9_a_a.next = l_7_7.head;
  e_s9_a_a.previous = l_7_7.head.previous;
  e_s9_a_a.previous.next = e_s9_a_a;
  e_s9_a_a.next.previous = e_s9_a_a;
  l_7_7.size = (l_7_7.size) + 1;
}
/*dll_add.sk11:28*/

void addLastHarness ()/*dll_add.sk11:28*/
{
  LinkedList@ANONYMOUS l_s1_1_1 = null;
  newList(l_s1_1_1);
  assert ((l_s1_1_1.size) == 0); //Assert at dll_add.sk11:34 (7798217866199117338)
  assert ((l_s1_1_1.head.next) == (l_s1_1_1.head)); //Assert at dll_add.sk11:35 (7880229527118724841)
  assert ((l_s1_1_1.head.previous) == (l_s1_1_1.head)); //Assert at dll_add.sk11:36 (7922078474106621595)
  LinkedList@ANONYMOUS l_s3_2_2 = null;
  newList(l_s3_2_2);
  addLast(l_s3_2_2, 8);
  assert ((l_s3_2_2.head.next.element) == 8); //Assert at dll_add.sk11:41 (8545123084939679249)
  assert ((l_s3_2_2.head.next.previous) == (l_s3_2_2.head)); //Assert at dll_add.sk11:42 (-2369656252837583467)
  assert ((l_s3_2_2.head.next.next) == (l_s3_2_2.head)); //Assert at dll_add.sk11:43 (-4184609394111727761)
  assert ((l_s3_2_2.size) == 1); //Assert at dll_add.sk11:44 (-4575612128912385193)
  LinkedList@ANONYMOUS l_s5_3_3 = null;
  newList(l_s5_3_3);
  addLast(l_s5_3_3, 8);
  addLast(l_s5_3_3, 5);
  assert ((l_s5_3_3.head.next.element) == 8); //Assert at dll_add.sk11:50 (-7469879907899036770)
  assert ((l_s5_3_3.head.next.previous) == (l_s5_3_3.head)); //Assert at dll_add.sk11:51 (6843464402789135913)
  assert ((l_s5_3_3.head.next.next.element) == 5); //Assert at dll_add.sk11:52 (3398496818835937701)
  assert ((l_s5_3_3.head.next.next.element) == 5); //Assert at dll_add.sk11:53 (2382066592367360201)
  assert ((l_s5_3_3.head.next.next.previous.element) == 8); //Assert at dll_add.sk11:54 (-6065428620105219523)
  assert ((l_s5_3_3.head.next.next.next) == (l_s5_3_3.head)); //Assert at dll_add.sk11:55 (2421111842216839711)
  assert ((l_s5_3_3.size) == 2); //Assert at dll_add.sk11:56 (4103016202963329874)
  LinkedList@ANONYMOUS l_s7_4_4 = null;
  newList(l_s7_4_4);
  addLast(l_s7_4_4, 8);
  addLast(l_s7_4_4, 5);
  addLast(l_s7_4_4, 13);
  assert ((l_s7_4_4.head.next.element) == 8); //Assert at dll_add.sk11:63 (-1082596764024489845)
  assert ((l_s7_4_4.head.next.previous) == (l_s7_4_4.head)); //Assert at dll_add.sk11:64 (5707751542965389419)
  assert ((l_s7_4_4.head.next.next.element) == 5); //Assert at dll_add.sk11:65 (6408541887802943440)
  assert ((l_s7_4_4.head.next.next.element) == 5); //Assert at dll_add.sk11:66 (1637780635395875435)
  assert ((l_s7_4_4.head.next.next.previous.element) == 8); //Assert at dll_add.sk11:67 (6309121861376153)
  assert ((l_s7_4_4.head.next.next.next.element) == 13); //Assert at dll_add.sk11:68 (1228863010088321701)
  assert ((l_s7_4_4.head.next.next.next.element) == 13); //Assert at dll_add.sk11:69 (6422426103791095994)
  assert ((l_s7_4_4.head.next.next.next.previous.element) == 5); //Assert at dll_add.sk11:70 (6946976882621896556)
  assert ((l_s7_4_4.head.next.next.next.next) == (l_s7_4_4.head)); //Assert at dll_add.sk11:71 (441104385344072780)
  assert ((l_s7_4_4.size) == 3); //Assert at dll_add.sk11:72 (-7520650070322762681)
}
/*dll_add.sk11:76*/

void addLastHarness__Wrapper ()  implements addLastHarness__WrapperNospec/*dll_add.sk11:76*/
{
  addLastHarness();
}
/*dll_add.sk11:82*/

void addLastHarness__WrapperNospec ()/*dll_add.sk11:82*/
{ }
/*dll_add.sk11:87*/

void newEntry (ref Entry _out_b_b)/*dll_add.sk11:87*/
{
  _out_b_b = null;
  _out_b_b = new Entry();
  _out_b_b.previous = null;
  _out_b_b.next = null;
  return;
}
/*dll_add.sk11:97*/

void newList (ref LinkedList _out_5_5)/*dll_add.sk11:97*/
{
  _out_5_5 = null;
  _out_5_5 = new LinkedList();
  Entry@ANONYMOUS _out_s11_6_6 = null;
  newEntry(_out_s11_6_6);
  _out_5_5.head = _out_s11_6_6;
  _out_5_5.head.next = _out_5_5.head;
  _out_5_5.head.previous = _out_5_5.head;
  _out_5_5.size = 0;
  return;
}
/* END PACKAGE ANONYMOUS*/
