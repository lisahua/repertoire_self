/* BEGIN PACKAGE ANONYMOUS*/
struct Entry {
    int element;
    Entry next;
    Entry previous;
}
struct LinkedList {
    Entry head;
    int size;
}
/*dll_add.sk0:13*/

void addLast (LinkedList l_7, int v_8_0)/*dll_add.sk0:13*/
{
  Entry@ANONYMOUS e_s9_a = null;
  newEntry(e_s9_a);
  e_s9_a.element = v_8_0;
  e_s9_a.next = l_7.head;
  e_s9_a.previous = l_7.head.previous;
  e_s9_a.previous.next = e_s9_a;
  int _tmprhs_s1 = l_7.size;
  e_s9_a.element = _tmprhs_s1;
  int _tmprhs_s4 = (e_s9_a.element) + 1;
  l_7.size = _tmprhs_s4;
  e_s9_a.element = v_8_0 - 0;
  e_s9_a.next.previous = e_s9_a;
}
/*dll_add.sk0:34*/

void addLastHarness ()/*dll_add.sk0:34*/
{
  LinkedList@ANONYMOUS l_s1_1 = null;
  newList(l_s1_1);
  assert ((l_s1_1.size) == 0); //Assert at dll_add.sk0:40 (3451243702896816532)
  assert ((l_s1_1.head.next) == (l_s1_1.head)); //Assert at dll_add.sk0:41 (-2720874336556601643)
  assert ((l_s1_1.head.previous) == (l_s1_1.head)); //Assert at dll_add.sk0:42 (849252940665271293)
  LinkedList@ANONYMOUS l_s3_2 = null;
  newList(l_s3_2);
  addLast(l_s3_2, 8);
  assert ((l_s3_2.head.next.element) == 8); //Assert at dll_add.sk0:47 (2017158676928135696)
  assert ((l_s3_2.head.next.previous) == (l_s3_2.head)); //Assert at dll_add.sk0:48 (8046207765218477300)
  assert ((l_s3_2.head.next.next) == (l_s3_2.head)); //Assert at dll_add.sk0:49 (1412910977274369764)
  assert ((l_s3_2.size) == 1); //Assert at dll_add.sk0:50 (-4732331280759988969)
  LinkedList@ANONYMOUS l_s5_3 = null;
  newList(l_s5_3);
  addLast(l_s5_3, 8);
  addLast(l_s5_3, 5);
  assert ((l_s5_3.head.next.element) == 8); //Assert at dll_add.sk0:56 (-4297064495080684066)
  assert ((l_s5_3.head.next.previous) == (l_s5_3.head)); //Assert at dll_add.sk0:57 (2562315285386392752)
  assert ((l_s5_3.head.next.next.element) == 5); //Assert at dll_add.sk0:58 (-7565265629814932302)
  assert ((l_s5_3.head.next.next.element) == 5); //Assert at dll_add.sk0:59 (-7166107461037480122)
  assert ((l_s5_3.head.next.next.previous.element) == 8); //Assert at dll_add.sk0:60 (3976267033811493118)
  assert ((l_s5_3.head.next.next.next) == (l_s5_3.head)); //Assert at dll_add.sk0:61 (1722374059476220064)
  assert ((l_s5_3.size) == 2); //Assert at dll_add.sk0:62 (-3031515722807231301)
  LinkedList@ANONYMOUS l_s7_4 = null;
  newList(l_s7_4);
  addLast(l_s7_4, 8);
  addLast(l_s7_4, 5);
  addLast(l_s7_4, 13);
  assert ((l_s7_4.head.next.element) == 8); //Assert at dll_add.sk0:69 (-9218565646801305094)
  assert ((l_s7_4.head.next.previous) == (l_s7_4.head)); //Assert at dll_add.sk0:70 (3704557990160856588)
  assert ((l_s7_4.head.next.next.element) == 5); //Assert at dll_add.sk0:71 (1610903289593488630)
  assert ((l_s7_4.head.next.next.element) == 5); //Assert at dll_add.sk0:72 (-6116881021388689593)
  assert ((l_s7_4.head.next.next.previous.element) == 8); //Assert at dll_add.sk0:73 (6816143646163071144)
  assert ((l_s7_4.head.next.next.next.element) == 13); //Assert at dll_add.sk0:74 (9051567497175526808)
  assert ((l_s7_4.head.next.next.next.element) == 13); //Assert at dll_add.sk0:75 (5153077642722881611)
  assert ((l_s7_4.head.next.next.next.previous.element) == 5); //Assert at dll_add.sk0:76 (-6901363329871576563)
  assert ((l_s7_4.head.next.next.next.next) == (l_s7_4.head)); //Assert at dll_add.sk0:77 (-5600728917403635902)
  assert ((l_s7_4.size) == 3); //Assert at dll_add.sk0:78 (-4428584797830843968)
}
/*dll_add.sk0:82*/

void addLastHarness__Wrapper ()  implements addLastHarness__WrapperNospec/*dll_add.sk0:82*/
{
  addLastHarness();
}
/*dll_add.sk0:88*/

void addLastHarness__WrapperNospec ()/*dll_add.sk0:88*/
{ }
/*dll_add.sk0:93*/

void newEntry (ref Entry _out_b)/*dll_add.sk0:93*/
{
  _out_b = null;
  _out_b = new Entry();
  _out_b.previous = null;
  _out_b.next = null;
  return;
}
/*dll_add.sk0:103*/

void newList (ref LinkedList _out_5)/*dll_add.sk0:103*/
{
  _out_5 = null;
  _out_5 = new LinkedList();
  Entry@ANONYMOUS _out_s11_6 = null;
  newEntry(_out_s11_6);
  _out_5.head = _out_s11_6;
  _out_5.head.next = _out_5.head;
  _out_5.head.previous = _out_5.head;
  _out_5.size = 0;
  return;
}
/* END PACKAGE ANONYMOUS*/
