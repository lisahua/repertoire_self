struct Entry{
    int element;
    Entry next;
    Entry previous;
}

Entry newEntry(){
    Entry n = new Entry();
    n.previous = null;
    n.next = null;
    return n;
}

struct LinkedList{
    Entry header;
    int size;
}

LinkedList newList() {
    LinkedList l = new LinkedList();
    l.header = newEntry();
    l.header.next = l.header;
    l.header.previous = l.header;
    l.size = 0;
    return l;
}

Entry addFirst(LinkedList l, int o) {
    Entry t = l.header.next;
    Entry e = newEntry();
    e.element = o;
    l.header.next = e;
    e.previous = l.header;
    e.next = t;
    if (t != l.header)
    t.previous = e;
   l.size = l.size+1;
   return e;
}

Entry addLast(LinkedList l, int o) {
    Entry t = l.header.next;
    Entry e = newEntry();
    e.element = o;
    while (t.next!=l.header)
    t = t.next;
    
    t.next = e;
    e.previous = t;
    e.next = l.header;
    l.size = l.size+1;
    return e;
}


harness void addFrontHarness() {
     //Empty
     LinkedList l = newList();
     assert l.size ==0;
     assert l.header.next == l.header;
     assert l.header.previous == l.header;
     
     //insert 1
    Entry one= addFirst(l,1);
     assert l.header.next ==one;
    assert l.header.previous == l.header;
     assert one.next == l.header;
     assert one.previous == l.header;
    assert l.size ==1;
     
     //insert 2
     Entry two= addFirst(l,2);
     assert l.header.next ==two;
      assert l.header.previous == l.header;
     assert two.next == one;
     assert two.previous == l.header;
     assert one.next == l.header;
     assert one.previous == two;
        assert l.size ==2;
     
          //insert 3
     Entry three= addFirst(l,3);
     assert l.header.next ==three;
      assert l.header.previous == l.header;
     assert three.next == two;
     assert three.previous == l.header;
     assert two.next == one;
     assert two.previous == three;
     assert one.next == l.header;
     assert one.previous == two;
        assert l.size ==3;
}

harness void addLastHarness() {
     //Empty
     LinkedList l = newList();
     assert l.size ==0;
     assert l.header.next == l.header;
     assert l.header.previous == l.header;
     
     //insert 1
    Entry one= addLast(l,1);
     assert l.header.next ==one;
     assert one.next == l.header;
     assert one.previous == l.header;
        assert l.size ==1;
     
     //insert 2
     Entry two= addLast(l,2);
     assert l.header.next ==one;
     assert l.header.previous == l.header;
     assert one.next ==two;
     assert one.previous == l.header;
     assert two.next == l.header;
     assert two.previous == one;
        assert l.size ==2;
     
     //insert 3
     Entry three= addLast(l,3);
     assert l.header.next ==one;
     assert l.header.previous == l.header;
     assert one.next == two;
     assert one.previous == l.header;
     assert two.next == three;
     assert two.previous == one;
     assert three.next == l.header;
     assert three.previous == two;
        assert l.size ==3;
     
}
