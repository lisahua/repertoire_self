struct Entry{
    int element;
    Entry next;
    Entry previous;
}

Entry newEntry(){
    Entry n = new Entry();
    n.previous = null;
    n.next = null;
    return n;
}

struct LinkedList{
    Entry header;
    int size;
}

LinkedList newList() {
    LinkedList l = new LinkedList();
    l.header = newEntry();
    l.header.next = l.header;
    l.header.previous = l.header;
    l.size = 0;
    return l;
}

Entry addFirst(LinkedList l, int o) {
    Entry t = l.header.next;
    Entry e = newEntry();
    e.element = o;
    l.header.next = e;
    e.previous = l.header;
    e.next = t;
    if (t != l.header)
    t.previous = e;
    l.size = l.size+1;
    return e;
}

void swapHeadTail(LinkedList l) {
    Entry t = l.header;
    while (t.next !=l.header){
    t = t.next;
    }
    if (t.previous == l.header) return ;
    Entry h_next = l.header.next;
   
   if (h_next.next ==t) {
    l.header.next = t;
    t.next = h_next;
    t.previous = l.header;
    h_next.next = l.header;
    h_next.previous = t;
    return;
    }
    Entry h_nn = h_next.next;
    Entry t_p = t.previous;
    l.header.next = t;
    h_next.previous = t.previous;
    h_next.next = l.header;
    t.next = h_nn;
    t.previous = l.header;
    
    h_nn.previous = t;
    t_p.next = h_next;
    
}

void swapTwoEntries(LinkedList l, Entry a, Entry b) {
    Entry t = l.header.next;
    if (a==null||b==null|| a==b) return ;
    if (l.header.next.next ==l.header) return;
    
    Entry d_a = null;
    Entry d_b =null;
    
    while (t!=l.header && (d_a==null || d_b ==null)) {
        if (t.element ==a.element && t.previous == a.previous && t.next == a.next)
            d_a = t;
        if (t.element ==b.element && t.previous == b.previous && t.next == b.next)
            d_b  = t;
        t = t.next;
    }
    
    if (d_a==null|| d_b==null) return;
    
   
    if (d_a.next ==d_b|| d_b.next==d_a) {
        Entry t1 = null;
        Entry t2 = null;
        if (d_a.next==d_b){
            t1=d_a;
            t2=d_b;
        }
        if (d_b.next==d_a){
            t1=d_b;
            t2=d_a;
        }

        Entry p_a = t1.previous;Entry p_b = t2.previous;
        Entry n_a = t1.next; Entry n_b = t2.next;
        
        t1.next = n_b;
        t2.previous = p_a;
        p_a.next = b;
        if (n_b !=l.header) {
        n_b.previous = t1;
        }
        t2.next = t1;
        t1.previous = t2;
        
        return;
    }
    
    Entry p_a = a.previous;Entry p_b = b.previous;
    Entry n_a = a.next; Entry n_b = b.next;
    
    d_a.previous.next = d_b;
    if (d_b.next!=l.header)
    d_b.next.previous = d_a;
    if (d_a.next!=l.header)
    d_a.next.previous = d_b;
    d_b.previous.next = d_a;
    
    d_a.previous = p_b;
    d_a.next = n_b;
    d_b.previous = p_a;
    d_b.next = n_a;
}


harness void swapHeadTailHarness() {
     //Empty
     LinkedList l = newList();
     swapHeadTail(l);
     assert l.size ==0;
     assert l.header.next == l.header;
     assert l.header.previous == l.header;
     
     //insert 1
     l = newList();
     Entry one= addFirst(l,1);
     swapHeadTail(l);
     assert l.header.next ==one;
     assert l.header.previous == l.header;
     assert one.next == l.header;
     assert one.previous == l.header;
     assert l.size ==1;
     
     //insert 2
      l = newList();
      one= addFirst(l,1);
     Entry two= addFirst(l,2);
      swapHeadTail(l);
     assert l.header.next ==one;
      assert l.header.previous == l.header;
     assert one.next == two;
     assert one.previous == l.header;
     assert two.next == l.header;
     assert two.previous == one;
        assert l.size ==2;
     
    //insert 3
    l = newList();
      one= addFirst(l,1);
     two= addFirst(l,2);
     Entry three= addFirst(l,3);
       swapHeadTail(l);
     assert l.header.next ==one;
      assert l.header.previous == l.header;
     assert one.next == two;
     assert one.previous == l.header;
     assert two.next == three;
     assert two.previous == one;
     assert three.next == l.header;
     assert three.previous == two;
        assert l.size ==3;
        
        
}

harness void swapTwoEntriesHarness() {
     //Empty
     LinkedList l = newList();
     Entry test = newEntry();
     test.element = 1;
    swapTwoEntries(l,null,test);
     assert l.size ==0;
     assert l.header.next == l.header;
     assert l.header.previous == l.header;
     
     //insert 1
     Entry one= addFirst(l,1);
      swapTwoEntries(l,one,test);
     assert l.header.next ==one;
     assert one.next == l.header;
     assert one.previous == l.header;
    assert l.size ==1;
     
     //insert 2
     l = newList();
     one= addFirst(l,1);
     Entry two= addFirst(l,2);
     swapTwoEntries(l,two,test);
     assert l.header.next ==two;
     assert l.header.previous == l.header;
     assert two.next ==one;
     assert two.previous == l.header;
     assert one.next == l.header;
     assert one.previous == two;
     assert l.size ==2;
        
     swapTwoEntries(l,one,two);
     assert l.header.next ==two;//BUG
     assert l.header.previous == l.header;
     assert one.next ==two;
     assert one.previous == l.header;
     assert two.next == l.header;
     assert two.previous == one;
       
     //insert 3
      l = newList();
     one= addFirst(l,1);
     two= addFirst(l,2);
     Entry three= addFirst(l,3);
     
   swapTwoEntries(l,three,one);
     assert l.header.next ==one;
     assert l.header.previous == l.header;
     assert one.next == two;
     assert one.previous == l.header;
     assert two.next == three;
     assert two.previous == one;
     assert three.next == l.header;
     assert three.previous == two;
        assert l.size ==3;
     
      swapTwoEntries(l,two,one);
     assert l.header.next ==one;//BUG
     assert l.header.previous == l.header;
     assert two.next == one;
     assert two.previous == l.header;
     assert one.next == three;
     assert one.previous == two;
     assert three.next == l.header;
     assert three.previous == one;
     
     //insert 4
        l = newList();
     one= addFirst(l,1);
     two= addFirst(l,2);
     three= addFirst(l,3);
     Entry four = addFirst(l,4);
     
     swapTwoEntries(l,two,three);
          assert l.header.next ==four;
     assert l.header.previous == l.header;
     assert four.next == three;//BUG
     assert four.previous == l.header;
     assert two.next == three;
     assert two.previous == four;
     assert three.next == one;
     assert three.previous == two;
     assert one.next == l.header;
     assert one.previous == three;
     

     
}
