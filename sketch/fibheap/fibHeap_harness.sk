include "fibHeap.sk";

harness void insertHarness() {
    FHeap h = newHeap();

    Node three = newNode(3);
    Node eighteen = newNode(18);
    Node thirtyNine = newNode(39);
    Node fiftyTwo = newNode(52);
    Node thirtyEight = newNode(38);
    Node fourtyOne = newNode(41);
    Node seventeen = newNode(17);
    Node thirty = newNode(30);

    eighteen.next = fiftyTwo;
    fiftyTwo.next = thirtyEight;
    three.child.root = eighteen;
    eighteen.child.root = thirtyNine;
    thirtyEight.child.root = fourtyOne;
    seventeen.child.root = thirty;
    
    three.degree = 3;
    eighteen.degree = 1;
    thirtyEight.degree = 1;
    seventeen.degree = 1;
    
    Node twentyOne = newNode(21);
    insert_fib(h,three);
    assert h.roots.root == three;
    insert_fib(h,seventeen);
    assert three.next == seventeen;
    insert_fib(h,twentyOne);
    assert seventeen.next == twentyOne;
    

}


harness void unionHarness() {
    Node three = newNode(3);
    Node eighteen = newNode(18);
    Node thirtyNine = newNode(39);
    Node fiftyTwo = newNode(52);
    Node thirtyEight = newNode(38);
    Node fourtyOne = newNode(41);
    Node seventeen = newNode(17);
    Node thirty = newNode(30);

    eighteen.next = fiftyTwo;
    fiftyTwo.next = thirtyEight;
    three.child.root = eighteen;
    eighteen.child.root = thirtyNine;
    thirtyEight.child.root = fourtyOne;
    seventeen.child.root = thirty;
    
    three.degree = 3;
    eighteen.degree = 1;
    thirtyEight.degree = 1;
    seventeen.degree = 1;
    
     FHeap h1 = newHeap();
    Node twentyOne = newNode(21);
    insert_fib(h1,three);
    insert_fib(h1,twentyOne);
    
     FHeap h2 = newHeap();
    insert_fib(h2,seventeen);

    FHeap h = heap_union(h1,h2);
    assert twentyOne.next == seventeen;
    assert h.roots.root == three;

}


harness void minHarness() {
    FHeap h = newHeap();

    Node three = newNode(3);
    Node eighteen = newNode(18);
    Node thirtyNine = newNode(39);
    Node fiftyTwo = newNode(52);
    Node thirtyEight = newNode(38);
    Node fourtyOne = newNode(41);
    Node seventeen = newNode(17);
    Node thirty = newNode(30);

    eighteen.next = fiftyTwo;
    fiftyTwo.next = thirtyEight;
    three.child.root = eighteen;
    eighteen.child.root = thirtyNine;
    thirtyEight.child.root = fourtyOne;
    seventeen.child.root = thirty;
    
    three.degree = 3;
    eighteen.degree = 1;
    thirtyEight.degree = 1;
    seventeen.degree = 1;
    
    insert_fib(h,three);
    insert_fib(h,seventeen);
    Node n = heap_min(h);
    assert n == three;
    assert h.roots.root == seventeen;
  //  assert seventeen.next == null;//BUG 
    assert eighteen.next == fiftyTwo;
    assert fiftyTwo.next == thirtyEight;
}


