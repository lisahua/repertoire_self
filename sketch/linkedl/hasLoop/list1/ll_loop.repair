/* BEGIN PACKAGE ANONYMOUS*/
struct Entry {
    Entry next;
    int element;
}
struct LinkedList {
    Entry head;
    int size;
}
/*ll_loop.sk:25*/

void hasLoop (LinkedList l, ref bit _out)/*ll_loop.sk:25*/
{
  _out = 0;
  Entry@ANONYMOUS ln1 = l.head;
  Entry@ANONYMOUS ln2 = l.head;
  while(1)
  {
    ln1 = ln1.next;
    if(((ln2.next) == (l.head)) || ((ln2.next.next) == (l.head)))/*ll_loop.sk:30*/
    {
      _out = 1;
      return;
    }
    ln2 = ln2.next.next;
    if(ln1 == ln2)/*ll_loop.sk:33*/
    {
      _out = 0;
      return;
    }
  }
  _out = 1;
  return;
}
/*ll_loop.sk:39*/

void insertHarness ()/*ll_loop.sk:39*/
{
  LinkedList@ANONYMOUS l_s1 = null;
  newList(l_s1);
  bit _out_s3 = 0;
  hasLoop(l_s1, _out_s3);
  assert (_out_s3 == 1); //Assert at ll_loop.sk:43 (3107884308965724471)
  assert ((l_s1.head.next) == (l_s1.head)); //Assert at ll_loop.sk:44 (5521844971499288725)
  LinkedList@ANONYMOUS l_s5 = null;
  newList(l_s5);
  Entry@ANONYMOUS n;
  n = new Entry();
  n.element = 22;
  n.next = l_s5.head;
  l_s5.head.next = n;
  bit _out_s7 = 0;
  hasLoop(l_s5, _out_s7);
  assert (_out_s7 == 1); //Assert at ll_loop.sk:52 (7411495990667461108)
  assert ((l_s5.head.next.element) == 22); //Assert at ll_loop.sk:53 (2762484050657233910)
  assert ((l_s5.head.next.next) == (l_s5.head)); //Assert at ll_loop.sk:54 (-1869694013995278277)
  n.next = n;
  bit _out_s9 = 0;
  hasLoop(l_s5, _out_s9);
  assert (_out_s9 == 0); //Assert at ll_loop.sk:58 (5286996899873409665)
  LinkedList@ANONYMOUS l_s11 = null;
  newList(l_s11);
  n = new Entry();
  n.element = 22;
  Entry@ANONYMOUS e;
  e = new Entry();
  e.element = 3;
  l_s11.head.next = e;
  e.next = n;
  n.next = l_s11.head;
  bit _out_s13 = 0;
  hasLoop(l_s11, _out_s13);
  assert (_out_s13 == 1); //Assert at ll_loop.sk:70 (2502261006772829665)
  assert ((l_s11.head.next) == e); //Assert at ll_loop.sk:71 (3948684467269311336)
  assert ((l_s11.head.next.next) == n); //Assert at ll_loop.sk:72 (7361680302426828345)
  assert ((l_s11.head.next.next.next) == (l_s11.head)); //Assert at ll_loop.sk:73 (3372174135949203874)
  n.next = e;
  bit _out_s15 = 0;
  hasLoop(l_s11, _out_s15);
  assert (_out_s15 == 0); //Assert at ll_loop.sk:77 (-1156455052691176880)
}
/*ll_loop.sk:39*/

void insertHarness__Wrapper ()  implements insertHarness__WrapperNospec/*ll_loop.sk:39*/
{
  insertHarness();
}
/*ll_loop.sk:39*/

void insertHarness__WrapperNospec ()/*ll_loop.sk:39*/
{ }
/*ll_loop.sk:17*/

void newList (ref LinkedList _out)/*ll_loop.sk:17*/
{
  _out = null;
  _out = new LinkedList();
  _out.head = new Entry();
  _out.head.next = _out.head;
  _out.size = 0;
  return;
}
/* END PACKAGE ANONYMOUS*/
