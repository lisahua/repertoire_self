/* BEGIN PACKAGE ANONYMOUS*/
struct Entry {
    Entry next;
    int element;
}
struct LinkedList {
    Entry head;
    int size;
}
/*ll_add.sk45:12*/

void insertHarness ()/*ll_add.sk45:12*/
{
  LinkedList@ANONYMOUS l_s2_1 = null;
  newList(l_s2_1);
  assert ((l_s2_1.head.next) == (l_s2_1.head)); //Assert at ll_add.sk45:19 (-6102271935660346524)
  assert ((l_s2_1.size) == 0); //Assert at ll_add.sk45:20 (-6449489762871710460)
  LinkedList@ANONYMOUS l_s4_2 = null;
  newList(l_s4_2);
  insertSort(l_s4_2, 22);
  assert ((l_s4_2.head.next.element) == 22); //Assert at ll_add.sk45:25 (8462281182122813629)
  assert ((l_s4_2.head.next.next) == (l_s4_2.head)); //Assert at ll_add.sk45:26 (1595290852778785120)
  assert ((l_s4_2.size) == 1); //Assert at ll_add.sk45:27 (-5149868508635011681)
  LinkedList@ANONYMOUS l_s6_3 = null;
  newList(l_s6_3);
  insertSort(l_s6_3, 3);
  insertSort(l_s6_3, 3);
  assert ((l_s6_3.head.next.element) == 3); //Assert at ll_add.sk45:33 (8108288282030190124)
  assert ((l_s6_3.head.next.next.element) == 3); //Assert at ll_add.sk45:34 (-2251514897083229839)
  assert ((l_s6_3.head.next.next.next) == (l_s6_3.head)); //Assert at ll_add.sk45:35 (6055572591653070877)
  assert ((l_s6_3.size) == 2); //Assert at ll_add.sk45:36 (-8283067361496639454)
  LinkedList@ANONYMOUS l_s8_4 = null;
  newList(l_s8_4);
  insertSort(l_s8_4, 0);
  insertSort(l_s8_4, -3);
  assert ((l_s8_4.head.next.element) == -3); //Assert at ll_add.sk45:42 (7959906373344972035)
  assert ((l_s8_4.head.next.next.element) == 0); //Assert at ll_add.sk45:43 (-2821038167670441871)
  assert ((l_s8_4.head.next.next.next) == (l_s8_4.head)); //Assert at ll_add.sk45:44 (3392827805284661040)
  assert ((l_s8_4.size) == 2); //Assert at ll_add.sk45:45 (6552176735008489601)
  LinkedList@ANONYMOUS l_s10_5 = null;
  newList(l_s10_5);
  insertSort(l_s10_5, 4);
  insertSort(l_s10_5, 3);
  insertSort(l_s10_5, 1);
  insertSort(l_s10_5, 6);
  assert ((l_s10_5.head.next.element) == 1); //Assert at ll_add.sk45:53 (2790797280800607713)
  assert ((l_s10_5.head.next.next.element) == 3); //Assert at ll_add.sk45:54 (2478612948352592255)
  assert ((l_s10_5.head.next.next.next.element) == 4); //Assert at ll_add.sk45:55 (2021047487066259416)
  assert ((l_s10_5.head.next.next.next.next.element) == 6); //Assert at ll_add.sk45:56 (-5625799815728594744)
  assert ((l_s10_5.head.next.next.next.next.next) == (l_s10_5.head)); //Assert at ll_add.sk45:57 (137752440892735143)
  assert ((l_s10_5.size) == 4); //Assert at ll_add.sk45:58 (-8891693700696944623)
}
/*ll_add.sk45:62*/

void insertHarness__Wrapper ()  implements insertHarness__WrapperNospec/*ll_add.sk45:62*/
{
  insertHarness();
}
/*ll_add.sk45:68*/

void insertHarness__WrapperNospec ()/*ll_add.sk45:68*/
{ }
/*ll_add.sk45:73*/

void insertSort (LinkedList l_7, int v_8)/*ll_add.sk45:73*/
{
  Entry@ANONYMOUS in_s12_a = null;
  newEntry(in_s12_a);
  in_s12_a.element = v_8;
  Entry@ANONYMOUS e_b = l_7.head;
  bit __sa0_c = ((e_b.next) != (l_7.head)) && ((e_b.next.element) < v_8);
  while(__sa0_c)
  {
    e_b = e_b.next;
    __sa0_c = ((e_b.next) != (l_7.head)) && ((e_b.next.element) < v_8);
  }
  l_7.size = (l_7.size) + 1;
  Entry@ANONYMOUS _tmprhs_s1 = e_b.next;
  in_s12_a.next = _tmprhs_s1;
  e_b.next = in_s12_a;
  return;
}
/*ll_add.sk45:112*/

void newEntry (ref Entry _out_d)/*ll_add.sk45:112*/
{
  _out_d = null;
  _out_d = new Entry();
  _out_d.next = null;
  return;
}
/*ll_add.sk45:121*/

void newList (ref LinkedList _out_6)/*ll_add.sk45:121*/
{
  _out_6 = null;
  _out_6 = new LinkedList();
  _out_6.head = new Entry();
  _out_6.head.next = _out_6.head;
  _out_6.size = 0;
  return;
}
/* END PACKAGE ANONYMOUS*/
