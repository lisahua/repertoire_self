/* BEGIN PACKAGE ANONYMOUS*/
struct Entry {
    Entry next;
    int element;
}
struct LinkedList {
    Entry head;
    int size;
}
/*ll_add.sk36:12*/

void insertHarness ()/*ll_add.sk36:12*/
{
  LinkedList@ANONYMOUS l_s2_1 = null;
  newList(l_s2_1);
  assert ((l_s2_1.head.next) == (l_s2_1.head)); //Assert at ll_add.sk36:19 (-3420562281512392914)
  assert ((l_s2_1.size) == 0); //Assert at ll_add.sk36:20 (6982428342100767901)
  LinkedList@ANONYMOUS l_s4_2 = null;
  newList(l_s4_2);
  insertSort(l_s4_2, 22);
  assert ((l_s4_2.head.next.element) == 22); //Assert at ll_add.sk36:25 (1600747421127004411)
  assert ((l_s4_2.head.next.next) == (l_s4_2.head)); //Assert at ll_add.sk36:26 (2790325782051215309)
  assert ((l_s4_2.size) == 1); //Assert at ll_add.sk36:27 (-4790196529473919006)
  LinkedList@ANONYMOUS l_s6_3 = null;
  newList(l_s6_3);
  insertSort(l_s6_3, 3);
  insertSort(l_s6_3, 3);
  assert ((l_s6_3.head.next.element) == 3); //Assert at ll_add.sk36:33 (-2694333474246525699)
  assert ((l_s6_3.head.next.next.element) == 3); //Assert at ll_add.sk36:34 (8783100220917950492)
  assert ((l_s6_3.head.next.next.next) == (l_s6_3.head)); //Assert at ll_add.sk36:35 (-2493775296354986836)
  assert ((l_s6_3.size) == 2); //Assert at ll_add.sk36:36 (-778894818388834962)
  LinkedList@ANONYMOUS l_s8_4 = null;
  newList(l_s8_4);
  insertSort(l_s8_4, 0);
  insertSort(l_s8_4, -3);
  assert ((l_s8_4.head.next.element) == -3); //Assert at ll_add.sk36:42 (3352941147490974190)
  assert ((l_s8_4.head.next.next.element) == 0); //Assert at ll_add.sk36:43 (-5085150193521033765)
  assert ((l_s8_4.head.next.next.next) == (l_s8_4.head)); //Assert at ll_add.sk36:44 (-6226281068078472589)
  assert ((l_s8_4.size) == 2); //Assert at ll_add.sk36:45 (-4882311120526351563)
  LinkedList@ANONYMOUS l_s10_5 = null;
  newList(l_s10_5);
  insertSort(l_s10_5, 4);
  insertSort(l_s10_5, 3);
  insertSort(l_s10_5, 1);
  insertSort(l_s10_5, 6);
  assert ((l_s10_5.head.next.element) == 1); //Assert at ll_add.sk36:53 (-1238290249396002686)
  assert ((l_s10_5.head.next.next.element) == 3); //Assert at ll_add.sk36:54 (4457884423575794428)
  assert ((l_s10_5.head.next.next.next.element) == 4); //Assert at ll_add.sk36:55 (-8494600728852291587)
  assert ((l_s10_5.head.next.next.next.next.element) == 6); //Assert at ll_add.sk36:56 (-4433054702114597638)
  assert ((l_s10_5.head.next.next.next.next.next) == (l_s10_5.head)); //Assert at ll_add.sk36:57 (-6313698390093248002)
  assert ((l_s10_5.size) == 4); //Assert at ll_add.sk36:58 (9106582523342147467)
}
/*ll_add.sk36:62*/

void insertHarness__Wrapper ()  implements insertHarness__WrapperNospec/*ll_add.sk36:62*/
{
  insertHarness();
}
/*ll_add.sk36:68*/

void insertHarness__WrapperNospec ()/*ll_add.sk36:68*/
{ }
/*ll_add.sk36:73*/

void insertSort (LinkedList l_7, int v_8)/*ll_add.sk36:73*/
{
  Entry@ANONYMOUS in_s12_a = null;
  newEntry(in_s12_a);
  in_s12_a.element = v_8;
  Entry@ANONYMOUS e_b = l_7.head;
  bit __sa0_c = ((e_b.next) != (l_7.head)) && ((e_b.next.element) < v_8);
  while(__sa0_c)
  {
    e_b = e_b.next;
    __sa0_c = ((e_b.next) != (l_7.head)) && ((e_b.next.element) < v_8);
  }
  Entry@ANONYMOUS _tmprhs_s1 = e_b.next;
  in_s12_a.next = _tmprhs_s1;
  e_b.next = in_s12_a;
  l_7.size = (l_7.size) + 1;
  return;
}
/*ll_add.sk36:112*/

void newEntry (ref Entry _out_d)/*ll_add.sk36:112*/
{
  _out_d = null;
  _out_d = new Entry();
  _out_d.next = null;
  return;
}
/*ll_add.sk36:121*/

void newList (ref LinkedList _out_6)/*ll_add.sk36:121*/
{
  _out_6 = null;
  _out_6 = new LinkedList();
  _out_6.head = new Entry();
  _out_6.head.next = _out_6.head;
  _out_6.size = 0;
  return;
}
/* END PACKAGE ANONYMOUS*/
