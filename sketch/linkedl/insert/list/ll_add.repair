/* BEGIN PACKAGE ANONYMOUS*/
struct Entry {
    Entry next;
    int element;
}
struct LinkedList {
    Entry head;
    int size;
}
/*ll_add.sk:45*/

void insertHarness ()/*ll_add.sk:45*/
{
  LinkedList@ANONYMOUS l_s2 = null;
  newList(l_s2);
  assert ((l_s2.head.next) == (l_s2.head)); //Assert at ll_add.sk:49 (-7127231406970950726)
  assert ((l_s2.size) == 0); //Assert at ll_add.sk:50 (-3088084655938612439)
  LinkedList@ANONYMOUS l_s4 = null;
  newList(l_s4);
  insertSort(l_s4, 22);
  assert ((l_s4.head.next.element) == 22); //Assert at ll_add.sk:55 (2275042657883440646)
  assert ((l_s4.head.next.next) == (l_s4.head)); //Assert at ll_add.sk:56 (-782336203325636281)
  assert ((l_s4.size) == 1); //Assert at ll_add.sk:57 (-2038282424015318856)
  LinkedList@ANONYMOUS l_s6 = null;
  newList(l_s6);
  insertSort(l_s6, 3);
  insertSort(l_s6, 3);
  assert ((l_s6.head.next.element) == 3); //Assert at ll_add.sk:63 (-8805967864232851320)
  assert ((l_s6.head.next.next.element) == 3); //Assert at ll_add.sk:64 (968543451920937813)
  assert ((l_s6.head.next.next.next) == (l_s6.head)); //Assert at ll_add.sk:65 (-5827695773322660904)
  assert ((l_s6.size) == 2); //Assert at ll_add.sk:66 (280541728654712176)
  LinkedList@ANONYMOUS l_s8 = null;
  newList(l_s8);
  insertSort(l_s8, 0);
  insertSort(l_s8, -3);
  assert ((l_s8.head.next.element) == -3); //Assert at ll_add.sk:72 (1085221853181975689)
  assert ((l_s8.head.next.next.element) == 0); //Assert at ll_add.sk:73 (957993507978566706)
  assert ((l_s8.head.next.next.next) == (l_s8.head)); //Assert at ll_add.sk:74 (-6752256678166535928)
  assert ((l_s8.size) == 2); //Assert at ll_add.sk:75 (228351649117472176)
  LinkedList@ANONYMOUS l_s10 = null;
  newList(l_s10);
  insertSort(l_s10, 4);
  insertSort(l_s10, 3);
  insertSort(l_s10, 1);
  insertSort(l_s10, 6);
  assert ((l_s10.head.next.element) == 1); //Assert at ll_add.sk:83 (3218482482695134922)
  assert ((l_s10.head.next.next.element) == 3); //Assert at ll_add.sk:84 (-6251555707760417229)
  assert ((l_s10.head.next.next.next.element) == 4); //Assert at ll_add.sk:85 (-776070804338793522)
  assert ((l_s10.head.next.next.next.next.element) == 6); //Assert at ll_add.sk:86 (-1633138820493959467)
  assert ((l_s10.head.next.next.next.next.next) == (l_s10.head)); //Assert at ll_add.sk:87 (-4016813893762878205)
  assert ((l_s10.size) == 4); //Assert at ll_add.sk:88 (8233997427724000498)
}
/*ll_add.sk:45*/

void insertHarness__Wrapper ()  implements insertHarness__WrapperNospec/*ll_add.sk:45*/
{
  insertHarness();
}
/*ll_add.sk:45*/

void insertHarness__WrapperNospec ()/*ll_add.sk:45*/
{ }
/*ll_add.sk:25*/

void insertSort (LinkedList l, int v)/*ll_add.sk:25*/
{
  Entry@ANONYMOUS in_s12 = null;
  newEntry(in_s12);
  in_s12.element = v;
  Entry@ANONYMOUS e;
  e = l.head;
  bit __sa0 = (e.next) != (l.head);
  while(__sa0)
  {
    if((e.next.element) < v)/*ll_add.sk:30*/
    {
      e = e.next;
    }
    else
    {
      in_s12.next = e.next;
      e.next = in_s12;
      l.size = (l.size) + 1;
      return;
    }
    __sa0 = (e.next) != (l.head);
  }
  in_s12.next = e.next;
  e.next = in_s12;
  l.size = (l.size) + 1;
  return;
}
/*ll_add.sk:11*/

void newEntry (ref Entry _out)/*ll_add.sk:11*/
{
  _out = null;
  _out = new Entry();
  _out.next = null;
  return;
}
/*ll_add.sk:17*/

void newList (ref LinkedList _out)/*ll_add.sk:17*/
{
  _out = null;
  _out = new LinkedList();
  _out.head = new Entry();
  _out.head.next = _out.head;
  _out.size = 0;
  return;
}
/* END PACKAGE ANONYMOUS*/
