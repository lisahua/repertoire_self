/* BEGIN PACKAGE ANONYMOUS*/
struct Entry {
    Entry next;
    int element;
}
struct LinkedList {
    Entry head;
    int size;
}
/*ll_add_err1.sk2:12*/

void insertHarness ()/*ll_add_err1.sk2:12*/
{
  LinkedList@ANONYMOUS l_s2_1_1 = null;
  newList(l_s2_1_1);
  assert ((l_s2_1_1.head.next) == (l_s2_1_1.head)); //Assert at ll_add_err1.sk2:19 (-8864066599976584567)
  assert ((l_s2_1_1.size) == 0); //Assert at ll_add_err1.sk2:20 (-1406832903158380778)
  LinkedList@ANONYMOUS l_s4_2_2 = null;
  newList(l_s4_2_2);
  insertSort(l_s4_2_2, 22);
  assert ((l_s4_2_2.head.next.element) == 22); //Assert at ll_add_err1.sk2:25 (-4634543585638668529)
  assert ((l_s4_2_2.head.next.next) == (l_s4_2_2.head)); //Assert at ll_add_err1.sk2:26 (-9007029206888139553)
  assert ((l_s4_2_2.size) == 1); //Assert at ll_add_err1.sk2:27 (-470002972057432216)
  LinkedList@ANONYMOUS l_s6_3_3 = null;
  newList(l_s6_3_3);
  insertSort(l_s6_3_3, 3);
  insertSort(l_s6_3_3, 3);
  assert ((l_s6_3_3.head.next.element) == 3); //Assert at ll_add_err1.sk2:33 (4413596553968092366)
  assert ((l_s6_3_3.head.next.next.element) == 3); //Assert at ll_add_err1.sk2:34 (-5239590704132321764)
  assert ((l_s6_3_3.head.next.next.next) == (l_s6_3_3.head)); //Assert at ll_add_err1.sk2:35 (8217243455577793805)
  assert ((l_s6_3_3.size) == 2); //Assert at ll_add_err1.sk2:36 (-79901211446505735)
  LinkedList@ANONYMOUS l_s8_4_4 = null;
  newList(l_s8_4_4);
  insertSort(l_s8_4_4, 0);
  insertSort(l_s8_4_4, -3);
  assert ((l_s8_4_4.head.next.element) == -3); //Assert at ll_add_err1.sk2:42 (-6006344271314330215)
  assert ((l_s8_4_4.head.next.next.element) == 0); //Assert at ll_add_err1.sk2:43 (-4193959496761078377)
  assert ((l_s8_4_4.head.next.next.next) == (l_s8_4_4.head)); //Assert at ll_add_err1.sk2:44 (-5853296266694002352)
  assert ((l_s8_4_4.size) == 2); //Assert at ll_add_err1.sk2:45 (-5249263830856002582)
  LinkedList@ANONYMOUS l_s10_5_5 = null;
  newList(l_s10_5_5);
  insertSort(l_s10_5_5, 4);
  insertSort(l_s10_5_5, 3);
  insertSort(l_s10_5_5, 1);
  insertSort(l_s10_5_5, 6);
  assert ((l_s10_5_5.head.next.element) == 1); //Assert at ll_add_err1.sk2:53 (8014438709883940161)
  assert ((l_s10_5_5.head.next.next.element) == 3); //Assert at ll_add_err1.sk2:54 (-1322558428755412235)
  assert ((l_s10_5_5.head.next.next.next.element) == 4); //Assert at ll_add_err1.sk2:55 (1327443112621486097)
  assert ((l_s10_5_5.head.next.next.next.next.element) == 6); //Assert at ll_add_err1.sk2:56 (1473764122253859195)
  assert ((l_s10_5_5.head.next.next.next.next.next) == (l_s10_5_5.head)); //Assert at ll_add_err1.sk2:57 (4040230223357806454)
  assert ((l_s10_5_5.size) == 4); //Assert at ll_add_err1.sk2:58 (8202187567056131297)
}
/*ll_add_err1.sk2:62*/

void insertHarness__Wrapper ()  implements insertHarness__WrapperNospec/*ll_add_err1.sk2:62*/
{
  insertHarness();
}
/*ll_add_err1.sk2:68*/

void insertHarness__WrapperNospec ()/*ll_add_err1.sk2:68*/
{ }
/*ll_add_err1.sk2:73*/

void insertSort (LinkedList l_7_7, int v_8_8)/*ll_add_err1.sk2:73*/
{
  Entry@ANONYMOUS in_s12_a_a = null;
  newEntry(in_s12_a_a);
  in_s12_a_a.element = v_8_8;
  Entry@ANONYMOUS e_b_b = l_7_7.head;
  bit __sa0_c_c = (e_b_b.next) != (l_7_7.head);
  while(__sa0_c_c)
  {
    if((e_b_b.next.element) < v_8_8)/*ll_add_err1.sk2:92*/
    {
      e_b_b = e_b_b.next;
    }
    else
    {
      in_s12_a_a.next = e_b_b.next;
      e_b_b.next = in_s12_a_a;
      l_7_7.size = (l_7_7.size) + 1;
      return;
    }
    __sa0_c_c = (e_b_b.next) != (l_7_7.head);
  }
  in_s12_a_a.next = e_b_b.next;
  e_b_b.next = in_s12_a_a;
  l_7_7.size = (l_7_7.size) + 1;
  return;
}
/*ll_add_err1.sk2:124*/

void newEntry (ref Entry _out_d_d)/*ll_add_err1.sk2:124*/
{
  _out_d_d = null;
  _out_d_d = new Entry();
  _out_d_d.next = null;
  return;
}
/*ll_add_err1.sk2:133*/

void newList (ref LinkedList _out_6_6)/*ll_add_err1.sk2:133*/
{
  _out_6_6 = null;
  _out_6_6 = new LinkedList();
  _out_6_6.head = new Entry();
  _out_6_6.head.next = _out_6_6.head;
  _out_6_6.size = 0;
  return;
}
/* END PACKAGE ANONYMOUS*/
