/* BEGIN PACKAGE ANONYMOUS*/
struct Entry {
    Entry next;
    int element;
}
struct LinkedList {
    Entry head;
    int size;
}
/*ll_add_err1.sk10:12*/

void insertHarness ()/*ll_add_err1.sk10:12*/
{
  LinkedList@ANONYMOUS l_s2_1 = null;
  newList(l_s2_1);
  assert ((l_s2_1.head.next) == (l_s2_1.head)); //Assert at ll_add_err1.sk10:19 (-3068070795492357738)
  assert ((l_s2_1.size) == 0); //Assert at ll_add_err1.sk10:20 (-4264125022115853289)
  LinkedList@ANONYMOUS l_s4_2 = null;
  newList(l_s4_2);
  insertSort(l_s4_2, 22);
  assert ((l_s4_2.head.next.element) == 22); //Assert at ll_add_err1.sk10:25 (-5490845141869371086)
  assert ((l_s4_2.head.next.next) == (l_s4_2.head)); //Assert at ll_add_err1.sk10:26 (-470053673266767092)
  assert ((l_s4_2.size) == 1); //Assert at ll_add_err1.sk10:27 (6560804233048340091)
  LinkedList@ANONYMOUS l_s6_3 = null;
  newList(l_s6_3);
  insertSort(l_s6_3, 3);
  insertSort(l_s6_3, 3);
  assert ((l_s6_3.head.next.element) == 3); //Assert at ll_add_err1.sk10:33 (4119096663101248553)
  assert ((l_s6_3.head.next.next.element) == 3); //Assert at ll_add_err1.sk10:34 (3097379441893958371)
  assert ((l_s6_3.head.next.next.next) == (l_s6_3.head)); //Assert at ll_add_err1.sk10:35 (-4455133506721362302)
  assert ((l_s6_3.size) == 2); //Assert at ll_add_err1.sk10:36 (-3242874072547977936)
  LinkedList@ANONYMOUS l_s8_4 = null;
  newList(l_s8_4);
  insertSort(l_s8_4, 0);
  insertSort(l_s8_4, -3);
  assert ((l_s8_4.head.next.element) == -3); //Assert at ll_add_err1.sk10:42 (-2584610271274093490)
  assert ((l_s8_4.head.next.next.element) == 0); //Assert at ll_add_err1.sk10:43 (-1843103924890904877)
  assert ((l_s8_4.head.next.next.next) == (l_s8_4.head)); //Assert at ll_add_err1.sk10:44 (5617090603492637648)
  assert ((l_s8_4.size) == 2); //Assert at ll_add_err1.sk10:45 (8839037490543730416)
  LinkedList@ANONYMOUS l_s10_5 = null;
  newList(l_s10_5);
  insertSort(l_s10_5, 4);
  insertSort(l_s10_5, 3);
  insertSort(l_s10_5, 1);
  insertSort(l_s10_5, 6);
  assert ((l_s10_5.head.next.element) == 1); //Assert at ll_add_err1.sk10:53 (2821865043919656798)
  assert ((l_s10_5.head.next.next.element) == 3); //Assert at ll_add_err1.sk10:54 (5492170306182860284)
  assert ((l_s10_5.head.next.next.next.element) == 4); //Assert at ll_add_err1.sk10:55 (667749821123622934)
  assert ((l_s10_5.head.next.next.next.next.element) == 6); //Assert at ll_add_err1.sk10:56 (2139027144983219019)
  assert ((l_s10_5.head.next.next.next.next.next) == (l_s10_5.head)); //Assert at ll_add_err1.sk10:57 (-1546713589353634537)
  assert ((l_s10_5.size) == 4); //Assert at ll_add_err1.sk10:58 (7773182874590331351)
}
/*ll_add_err1.sk10:62*/

void insertHarness__Wrapper ()  implements insertHarness__WrapperNospec/*ll_add_err1.sk10:62*/
{
  insertHarness();
}
/*ll_add_err1.sk10:68*/

void insertHarness__WrapperNospec ()/*ll_add_err1.sk10:68*/
{ }
/*ll_add_err1.sk10:73*/

void insertSort (LinkedList l_7, int v_8_0)/*ll_add_err1.sk10:73*/
{
  Entry@ANONYMOUS in_s12_a = null;
  newEntry(in_s12_a);
  in_s12_a.element = v_8_0;
  Entry@ANONYMOUS e_b = l_7.head;
  bit __sa0_c = ((e_b.next) != (l_7.head)) && ((e_b.next.element) < v_8_0);
  while(__sa0_c)
  {
    e_b = e_b.next;
    __sa0_c = ((e_b.next) != (l_7.head)) && ((e_b.next.element) < v_8_0);
  }
  in_s12_a.next = e_b.next;
  e_b.next = in_s12_a;
  int _tmprhs_s1 = l_7.size;
  in_s12_a.element = _tmprhs_s1;
  int _tmprhs_s4 = (e_b.next.element) + 1;
  l_7.size = _tmprhs_s4;
  in_s12_a.element = v_8_0 - 0;
  return;
}
/*ll_add_err1.sk10:116*/

void newEntry (ref Entry _out_d)/*ll_add_err1.sk10:116*/
{
  _out_d = null;
  _out_d = new Entry();
  _out_d.next = null;
  return;
}
/*ll_add_err1.sk10:125*/

void newList (ref LinkedList _out_6)/*ll_add_err1.sk10:125*/
{
  _out_6 = null;
  _out_6 = new LinkedList();
  _out_6.head = new Entry();
  _out_6.head.next = _out_6.head;
  _out_6.size = 0;
  return;
}
/* END PACKAGE ANONYMOUS*/
