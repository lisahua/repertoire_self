/* BEGIN PACKAGE ANONYMOUS*/
struct Entry {
    Entry next;
    int element;
}
struct LinkedList {
    Entry head;
    int size;
}
/*ll_add_err2.sk1:12*/

void insertHarness ()/*ll_add_err2.sk1:12*/
{
  LinkedList@ANONYMOUS l_s2_1 = null;
  newList(l_s2_1);
  assert ((l_s2_1.head.next) == (l_s2_1.head)); //Assert at ll_add_err2.sk1:19 (4776540702079408487)
  assert ((l_s2_1.size) == 0); //Assert at ll_add_err2.sk1:20 (-7716956126159194812)
  LinkedList@ANONYMOUS l_s4_2 = null;
  newList(l_s4_2);
  insertSort(l_s4_2, 22);
  assert ((l_s4_2.head.next.element) == 22); //Assert at ll_add_err2.sk1:25 (-5300951173045431314)
  assert ((l_s4_2.head.next.next) == (l_s4_2.head)); //Assert at ll_add_err2.sk1:26 (8398270179263891428)
  assert ((l_s4_2.size) == 1); //Assert at ll_add_err2.sk1:27 (-3780385164131841892)
  LinkedList@ANONYMOUS l_s6_3 = null;
  newList(l_s6_3);
  insertSort(l_s6_3, 3);
  insertSort(l_s6_3, 3);
  assert ((l_s6_3.head.next.element) == 3); //Assert at ll_add_err2.sk1:33 (5881536618683087656)
  assert ((l_s6_3.head.next.next.element) == 3); //Assert at ll_add_err2.sk1:34 (-8051242723650775620)
  assert ((l_s6_3.head.next.next.next) == (l_s6_3.head)); //Assert at ll_add_err2.sk1:35 (651900190467225539)
  assert ((l_s6_3.size) == 2); //Assert at ll_add_err2.sk1:36 (6560462133645101423)
  LinkedList@ANONYMOUS l_s8_4 = null;
  newList(l_s8_4);
  insertSort(l_s8_4, 0);
  insertSort(l_s8_4, -3);
  assert ((l_s8_4.head.next.element) == -3); //Assert at ll_add_err2.sk1:42 (2626084994370354074)
  assert ((l_s8_4.head.next.next.element) == 0); //Assert at ll_add_err2.sk1:43 (-6148301121662274333)
  assert ((l_s8_4.head.next.next.next) == (l_s8_4.head)); //Assert at ll_add_err2.sk1:44 (2572079137361220686)
  assert ((l_s8_4.size) == 2); //Assert at ll_add_err2.sk1:45 (-1758138937052948476)
  LinkedList@ANONYMOUS l_s10_5 = null;
  newList(l_s10_5);
  insertSort(l_s10_5, 4);
  insertSort(l_s10_5, 3);
  insertSort(l_s10_5, 1);
  insertSort(l_s10_5, 6);
  assert ((l_s10_5.head.next.element) == 1); //Assert at ll_add_err2.sk1:53 (8913962172895154946)
  assert ((l_s10_5.head.next.next.element) == 3); //Assert at ll_add_err2.sk1:54 (828671902598025569)
  assert ((l_s10_5.head.next.next.next.element) == 4); //Assert at ll_add_err2.sk1:55 (8609427304272342748)
  assert ((l_s10_5.head.next.next.next.next.element) == 6); //Assert at ll_add_err2.sk1:56 (549721280671518259)
  assert ((l_s10_5.head.next.next.next.next.next) == (l_s10_5.head)); //Assert at ll_add_err2.sk1:57 (4634388603555645248)
  assert ((l_s10_5.size) == 4); //Assert at ll_add_err2.sk1:58 (340348211268801824)
}
/*ll_add_err2.sk1:62*/

void insertHarness__Wrapper ()  implements insertHarness__WrapperNospec/*ll_add_err2.sk1:62*/
{
  insertHarness();
}
/*ll_add_err2.sk1:68*/

void insertHarness__WrapperNospec ()/*ll_add_err2.sk1:68*/
{ }
/*ll_add_err2.sk1:73*/

void insertSort (LinkedList l_7, int v_8)/*ll_add_err2.sk1:73*/
{
  Entry@ANONYMOUS in_s12_a = null;
  newEntry(in_s12_a);
  in_s12_a.element = v_8;
  Entry@ANONYMOUS e_b = l_7.head;
  bit __sa0_c = ((e_b.next) != (l_7.head)) && ((e_b.next.element) < v_8);
  while(__sa0_c)
  {
    e_b = e_b.next;
    __sa0_c = ((e_b.next) != (l_7.head)) && ((e_b.next.element) < v_8);
  }
  Entry@ANONYMOUS _tmprhs_s1 = e_b.next;
  in_s12_a.next = _tmprhs_s1;
  e_b.next = in_s12_a;
  l_7.size = (l_7.size) + 1;
  return;
}
/*ll_add_err2.sk1:112*/

void newEntry (ref Entry _out_d)/*ll_add_err2.sk1:112*/
{
  _out_d = null;
  _out_d = new Entry();
  _out_d.next = null;
  return;
}
/*ll_add_err2.sk1:121*/

void newList (ref LinkedList _out_6)/*ll_add_err2.sk1:121*/
{
  _out_6 = null;
  _out_6 = new LinkedList();
  _out_6.head = new Entry();
  _out_6.head.next = _out_6.head;
  _out_6.size = 0;
  return;
}
/* END PACKAGE ANONYMOUS*/
