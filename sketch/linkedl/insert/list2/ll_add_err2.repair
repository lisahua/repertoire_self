/* BEGIN PACKAGE ANONYMOUS*/
struct Entry {
    Entry next;
    int element;
}
struct LinkedList {
    Entry head;
    int size;
}
/*ll_add_err2.sk3:12*/

void insertHarness ()/*ll_add_err2.sk3:12*/
{
  LinkedList@ANONYMOUS l_s2_1_1 = null;
  newList(l_s2_1_1);
  assert ((l_s2_1_1.head.next) == (l_s2_1_1.head)); //Assert at ll_add_err2.sk3:19 (6340733798246202319)
  assert ((l_s2_1_1.size) == 0); //Assert at ll_add_err2.sk3:20 (-4162540861107440316)
  LinkedList@ANONYMOUS l_s4_2_2 = null;
  newList(l_s4_2_2);
  insertSort(l_s4_2_2, 22);
  assert ((l_s4_2_2.head.next.element) == 22); //Assert at ll_add_err2.sk3:25 (3983779301574931422)
  assert ((l_s4_2_2.head.next.next) == (l_s4_2_2.head)); //Assert at ll_add_err2.sk3:26 (-3202131036402877909)
  assert ((l_s4_2_2.size) == 1); //Assert at ll_add_err2.sk3:27 (94437177386675162)
  LinkedList@ANONYMOUS l_s6_3_3 = null;
  newList(l_s6_3_3);
  insertSort(l_s6_3_3, 3);
  insertSort(l_s6_3_3, 3);
  assert ((l_s6_3_3.head.next.element) == 3); //Assert at ll_add_err2.sk3:33 (-3413128466906081242)
  assert ((l_s6_3_3.head.next.next.element) == 3); //Assert at ll_add_err2.sk3:34 (217466319860885021)
  assert ((l_s6_3_3.head.next.next.next) == (l_s6_3_3.head)); //Assert at ll_add_err2.sk3:35 (-2737014700109612227)
  assert ((l_s6_3_3.size) == 2); //Assert at ll_add_err2.sk3:36 (3932667044267566200)
  LinkedList@ANONYMOUS l_s8_4_4 = null;
  newList(l_s8_4_4);
  insertSort(l_s8_4_4, 0);
  insertSort(l_s8_4_4, -3);
  assert ((l_s8_4_4.head.next.element) == -3); //Assert at ll_add_err2.sk3:42 (7839371304592958235)
  assert ((l_s8_4_4.head.next.next.element) == 0); //Assert at ll_add_err2.sk3:43 (-1828429197839181415)
  assert ((l_s8_4_4.head.next.next.next) == (l_s8_4_4.head)); //Assert at ll_add_err2.sk3:44 (-3082134619212804148)
  assert ((l_s8_4_4.size) == 2); //Assert at ll_add_err2.sk3:45 (-7803661426215340856)
  LinkedList@ANONYMOUS l_s10_5_5 = null;
  newList(l_s10_5_5);
  insertSort(l_s10_5_5, 4);
  insertSort(l_s10_5_5, 3);
  insertSort(l_s10_5_5, 1);
  insertSort(l_s10_5_5, 6);
  assert ((l_s10_5_5.head.next.element) == 1); //Assert at ll_add_err2.sk3:53 (-6483930537441554739)
  assert ((l_s10_5_5.head.next.next.element) == 3); //Assert at ll_add_err2.sk3:54 (-1559796504346845099)
  assert ((l_s10_5_5.head.next.next.next.element) == 4); //Assert at ll_add_err2.sk3:55 (8991943066430077521)
  assert ((l_s10_5_5.head.next.next.next.next.element) == 6); //Assert at ll_add_err2.sk3:56 (-5821223418457366471)
  assert ((l_s10_5_5.head.next.next.next.next.next) == (l_s10_5_5.head)); //Assert at ll_add_err2.sk3:57 (7725536074587027752)
  assert ((l_s10_5_5.size) == 4); //Assert at ll_add_err2.sk3:58 (8124858446509667561)
}
/*ll_add_err2.sk3:62*/

void insertHarness__Wrapper ()  implements insertHarness__WrapperNospec/*ll_add_err2.sk3:62*/
{
  insertHarness();
}
/*ll_add_err2.sk3:68*/

void insertHarness__WrapperNospec ()/*ll_add_err2.sk3:68*/
{ }
/*ll_add_err2.sk3:73*/

void insertSort (LinkedList l_7_7, int v_8_8)/*ll_add_err2.sk3:73*/
{
  Entry@ANONYMOUS in_s12_a_a = null;
  newEntry(in_s12_a_a);
  in_s12_a_a.element = v_8_8;
  Entry@ANONYMOUS e_b_b = l_7_7.head;
  in_s12_a_a.next = e_b_b.next;
  bit __sa0_c_c = ((e_b_b.next) != (l_7_7.head)) && ((e_b_b.next.element) < v_8_8);
  while(__sa0_c_c)
  {
    e_b_b = e_b_b.next;
    in_s12_a_a.next = in_s12_a_a.next;
    __sa0_c_c = ((e_b_b.next) != (l_7_7.head)) && ((e_b_b.next.element) < v_8_8);
    in_s12_a_a.next = in_s12_a_a.next.next;
  }
  e_b_b.next = in_s12_a_a;
  in_s12_a_a.next = in_s12_a_a.next;
  l_7_7.size = (l_7_7.size) + 1;
  in_s12_a_a.next = in_s12_a_a.next;
  return;
}
/*ll_add_err2.sk3:132*/

void newEntry (ref Entry _out_d_d)/*ll_add_err2.sk3:132*/
{
  _out_d_d = null;
  _out_d_d = new Entry();
  _out_d_d.next = null;
  return;
}
/*ll_add_err2.sk3:141*/

void newList (ref LinkedList _out_6_6)/*ll_add_err2.sk3:141*/
{
  _out_6_6 = null;
  _out_6_6 = new LinkedList();
  _out_6_6.head = new Entry();
  _out_6_6.head.next = _out_6_6.head;
  _out_6_6.size = 0;
  return;
}
/* END PACKAGE ANONYMOUS*/
