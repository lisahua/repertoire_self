struct Node {
Node next;
int value;
}

struct LinkedList {
Node header;
}

Node newNode() {
Node n = new Node();
n.next = null;
return n;
}
//sentinel header
LinkedList newList() {
LinkedList l = new LinkedList();
l.header = newNode();
return l;
}

Node addFirst (LinkedList l, int val) {
Node n = newNode();
n.value = val;
n.next = l.header.next;
l.header.next = n;
return n;
}

Node addLast (LinkedList l, int val) {
Node n = newNode();
n.value = val;
Node prev = l.header.next;
if (prev ==null) {
l.header.next = n;
return n;
}
while (prev.next!=null) {
prev = prev.next;
}
prev.next = n;
return n;
}

harness void addFirstHarness() {
//Empty
LinkedList l = newList();
assert l.header.next == null;

//insert 1
Node one = addFirst(l,1);
assert l.header.next == one;
assert one.next ==null;

//insert 2;
Node two = addFirst(l,2);
assert l.header.next == two;
assert two.next ==one;
assert one.next ==null;

//insert 3;
Node three = addFirst(l,3);
assert l.header.next == three;
assert three.next ==two;
assert two.next ==one;
assert one.next == null;
}

harness void addLastHarness() {
//Empty
LinkedList l = newList();
assert l.header.next == null;

//insert 1
Node one = addLast(l,1);
assert l.header.next == one;
assert one.next ==null;

//insert 2;
Node two = addLast(l,2);
assert l.header.next == one;
assert one.next ==two;
assert two.next ==null;

//insert 3;
Node three = addLast(l,3);
assert l.header.next == one;
assert one.next ==two;
assert two.next ==three;
assert three.next == null;
}

