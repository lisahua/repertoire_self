struct Node {
Node next;
int value;
}

struct LinkedList {
Node header;
}

Node newNode() {
Node n = new Node();
n.next = null;
return n;
}
//sentinel header
LinkedList newList() {
LinkedList l = new LinkedList();
l.header = newNode();
return l;
}

Node addFirst (LinkedList l, int val) {
Node n = newNode();
n.value = val;
Node first = l.header.next;
n.next = first;
l.header.next = n;
return n;
}


Node deleteFirst(LinkedList l) {
Node n = l.header.next;
if (n!=null) {
l.header.next = n.next;
}
return n;
}


Node deleteLast(LinkedList l) {
Node n = l.header.next;
    if (n ==null)
    return n;
    Node prev = null;
    while (n.next!=null) {
        prev=n;
        n= n.next;
    }
    prev.next = null;
    return n;
}

harness void deleteFirstHarness() {
//Empty
LinkedList l = newList();
Node n = deleteFirst(l);
assert n == null;
assert l.header.next == null;

//insert 1
 l = newList();
Node one = addFirst(l,1);
n = deleteFirst(l);
assert n == one;
assert l.header.next ==null;

//insert 2;
 l = newList();
one = addFirst(l,1);
Node two = addFirst(l,2);
n = deleteFirst(l);
assert l.header.next == one;
assert two ==n;
assert one.next == null;

//insert 3;
 l = newList();
one = addFirst(l,1);
two = addFirst(l,2);
Node three = addFirst(l,3);

n = deleteFirst(l);
assert l.header.next == two;
assert two.next ==one;
assert three ==n;
}

harness void deleteLastHarness() {
//Empty
LinkedList l = newList();
Node n = deleteLast(l);
assert n == null;
assert l.header.next == null;

//insert 1
 l = newList();
Node one = addFirst(l,1);
n = deleteLast(l);
assert n == one;
assert l.header.next ==null;

//insert 2;
 l = newList();
one = addFirst(l,1);
Node two = addFirst(l,2);
n = deleteLast(l);
assert l.header.next == two;
assert two.next ==null;
assert n == one;

//insert 3;
 l = newList();
one = addFirst(l,1);
two = addFirst(l,2);
Node three = addFirst(l,3);

n = deleteLast(l);
assert l.header.next == three;
assert three.next ==two;
assert two.next ==null;
assert one == n;
}
