struct Node {
Node next;
int value;
}

struct LinkedList {
Node header;
}

Node newNode() {
Node n = new Node();
n.next = null;
return n;
}
//sentinel header
LinkedList newList() {
LinkedList l = new LinkedList();
l.header = newNode();
return l;
}

Node addFirst (LinkedList l, int val) {
Node n = newNode();
n.value = val;
Node first = l.header.next;
n.next = first;
l.header.next = n;
return n;
}

Node findLast(LinkedList l) {
    Node n = l.header.next;
    Node prev = null;
    while (n!= null) {
    prev = n;
    n = n.next;
    }
    return prev;
}

Node findNode(LinkedList l,Node n) {
if (n==null) return null;
    Node tmp = l.header.next;
    while (tmp!= null && (tmp.value != n.value || tmp.next != n.next)) {
    tmp = tmp.next;
    }
    return tmp;
}

harness void findLastHarness() {
//Empty
LinkedList l = newList();
Node n = findLast(l);
assert l.header.next == null;
assert n == null;

//insert 1
l = newList();
Node one = addFirst(l,1);
n = findLast(l);
assert l.header.next == one;
assert one == n;

//insert 2;
l = newList();
one = addFirst(l,1);
Node two = addFirst(l,2);
n = findLast(l);
assert l.header.next == two;
assert two.next ==one;
assert one == n;
assert one.next ==null;

//insert 3;
l = newList();
one = addFirst(l,1);
two = addFirst(l,2);
Node three = addFirst(l,3);
n = findLast(l);
assert l.header.next == three;
assert three.next ==two;
assert two.next ==one;
assert one.next == null;
assert one == n;
}


harness void findNodeHarness() {
//Empty
LinkedList l = newList();
Node n = findNode(l,null);
assert l.header.next == null;
assert n == null;

Node test = newNode();
test.value =-10;
n = findNode(l,test);
assert n==null;

//insert 1
l = newList();
Node one = addFirst(l,1);
n = findNode(l, one);
assert l.header.next == one;
assert one == n;

n = findNode(l, test);
assert n == null;

//insert 2;
l = newList();
one = addFirst(l,1);
Node two = addFirst(l,2);

n = findNode(l, one);
assert l.header.next == two;
assert two.next ==one;
assert one == n;
assert one.next ==null;

n = findNode(l, two);
assert two == n;

n = findNode(l, one);
assert one == n;

//insert 3;
l = newList();
one = addFirst(l,1);
two = addFirst(l,2);
Node three = addFirst(l,3);

n = findNode(l,two);
assert l.header.next == three;
assert three.next ==two;
assert two.next ==one;
assert one.next == null;
assert two == n;

n = findNode(l,one);
assert one == n;

n = findNode(l,three);
assert three == n;
}
