pragma options "--fe-output-code";

struct Node {
Node next;
int value;
}

struct LinkedList {
Node header;
int size;
}

Node newNode() {
Node n = new Node();
n.next = null;
return n;
}
//sentinel header
LinkedList newList() {
LinkedList l = new LinkedList();
l.header = newNode();
l.size =0;
return l;
}

Node addFirst (LinkedList l, int val) {
Node n = newNode();
n.value = val;
n.next = l.header.next;
l.header.next = n;
l.size = l.size+1;
return n;
}


void reverse(LinkedList l) {
Node a =l.header.next;
if (a==null || a.next==null)
    return;
    
Node b = a.next;
Node c = null;
a.next =null;
 while (b !=null) {
    l.header.next = b;
    c = b.next;
    b.next = a;
    a = b;
    b = c;
 }
}

harness void reverseHarness() {
//Empty
LinkedList l = newList();
reverse(l);
assert l.header.next == null;
assert l.size ==0;

//insert 1
Node one = addFirst(l,1);
reverse(l);
assert l.header.next == one;
assert one.next ==null;
assert l.size ==1;

//insert 2;
l = newList();
one = addFirst(l,1);
Node two = addFirst(l,2);
reverse(l);

assert l.header.next == one;
assert one.next ==two;
assert two.next ==null;
assert l.size ==2;

//insert 3;
l = newList();
one = addFirst(l,1);
two = addFirst(l,2);
Node three = addFirst(l,3);
reverse(l);
assert l.header.next == one;
assert one.next ==two;
assert two.next ==three;
assert three.next == null;
assert l.size ==3;

}