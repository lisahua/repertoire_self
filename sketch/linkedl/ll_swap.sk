struct Node {
Node next;
int value;
}

struct LinkedList {
Node header;
int size;
}

Node newNode() {
Node n = new Node();
n.next = null;
return n;
}
//sentinel header
LinkedList newList() {
LinkedList l = new LinkedList();
l.header = newNode();
l.size =0;
return l;
}

Node addFirst (LinkedList l, int val) {
Node n = newNode();
n.value = val;
n.next = l.header.next;
l.header.next = n;
l.size = l.size+1;
return n;
}

void swapHeadTail(LinkedList l) {
    Node n = l.header.next;
    Node prev = null;
    if (n ==null)
        return;
    while (n.next!= null) {
        prev = n;
        n = n.next;
    }
   if ( prev !=null) {
prev.next = l.header.next;
n.next = l.header.next.next;
l.header.next = n;
prev.next.next = null;
   }
}

void swapTwoNode (LinkedList l, Node a, Node b) {
if (a==null|| b==null || (a.value ==b.value && a.next ==b.next)) 
return;
Node tmp = l.header;
Node a_prev = null;
Node b_prev =null;

while (tmp.next!= null && (a_prev ==null || b_prev ==null)) {
if (tmp.next.value == a.value && tmp.next.next == a.next)
a_prev =tmp;
if (tmp.next.value == b.value && tmp.next.next == b.next)
b_prev =tmp;
tmp = tmp.next;
}

if (a_prev ==null || b_prev ==null) return;

if (a_prev ==b){
b.next = a.next;
b_prev.next = a;
a.next = b;
return;
}
 if (b_prev ==a){
a.next = b.next;
b.next = a;
a_prev.next =b;
return;
}
Node a_next = a.next;
a.next = b.next;
b_prev.next = a;
b.next = a_next;
if (a_prev !=b)
a_prev.next = b;
}

harness void swapHeadTailHarness() {
//Empty
LinkedList l = newList();
 swapHeadTail(l);
assert l.header.next == null;
assert l.size ==0;

//insert 1
l = newList();
Node one = addFirst(l,1);
 swapHeadTail(l);
assert l.header.next == one;
assert l.size ==1;

//insert 2;
l = newList();
one = addFirst(l,1);
Node two = addFirst(l,2);
swapHeadTail(l);
assert l.header.next == one;
assert one.next == two;
assert two.next == null;
assert l.size ==2;

//insert 3;
l = newList();
one = addFirst(l,1);
two = addFirst(l,2);
Node three = addFirst(l,3);
swapHeadTail(l);
assert l.header.next == one;
assert one.next ==two;
assert two.next ==three;
assert three.next == null;
assert l.size ==3;

//insert 4;
l = newList();
one = addFirst(l,1);
two = addFirst(l,2);
three = addFirst(l,3);
Node four = addFirst(l,4);
swapHeadTail(l);
assert l.header.next == one;
assert one.next ==three;
assert three.next ==two;
assert two.next == four;
assert four.next == null;
assert l.size ==4;
}

harness void swapTwoNodeHarness() {
//Empty
LinkedList l = newList();
 swapTwoNode(l,null,null);
assert l.header.next == null;
assert l.size ==0;

//insert 1
l = newList();
Node one = addFirst(l,1);
 swapTwoNode(l,null,null);
assert l.header.next == one;
assert l.size ==1;

//insert 2;
l = newList();
one = addFirst(l,1);
Node two = addFirst(l,2);
 swapTwoNode(l,one, null);
assert l.header.next == two;
assert two.next ==one;
assert one.next ==null;

 swapTwoNode(l, null,one);
assert l.header.next == two;
assert two.next ==one;
assert one.next ==null;

 swapTwoNode(l,two, null);
assert l.header.next == two;
assert two.next ==one;
assert one.next ==null;

 swapTwoNode(l, null,two);
assert l.header.next == two;
assert two.next ==one;
assert one.next ==null;

 swapTwoNode(l, one,two);
assert l.header.next == one;
assert one.next == two;
assert two.next == null;

 swapTwoNode(l, two,one);
assert l.header.next == two;
assert two.next ==one;
assert one.next ==null;
assert l.size ==2;

//insert 3;
l = newList();
one = addFirst(l,1);
two = addFirst(l,2);
Node three = addFirst(l,3);

 swapTwoNode(l,one,two);
assert l.header.next == three;
assert three.next ==one;
assert one.next ==two;
assert two.next == null;

 swapTwoNode(l,three,two);
assert l.header.next == two;
assert two.next ==one;
assert one.next ==three;
assert three.next == null;


 swapTwoNode(l,one,three);
assert l.header.next == two;
assert two.next ==three;
assert three.next ==one;
assert one.next == null;
assert l.size ==3;

//insert 4;
l = newList();
one = addFirst(l,1);
two = addFirst(l,2);
three = addFirst(l,3);
Node four = addFirst(l,4);

 swapTwoNode(l,three, two);
assert l.header.next == four;
assert four.next ==two;
assert two.next ==three;
assert three.next == one;
assert one.next == null;

 swapTwoNode(l,four, three);
assert l.header.next == three;
assert three.next ==two;
assert two.next ==four;
assert four.next == one;
assert one.next == null;

 swapTwoNode(l,three, one);
assert l.header.next == one;
assert one.next ==two;
assert two.next ==four;
assert four.next == three;
assert three.next == null;

 swapTwoNode(l,one, two);
assert l.header.next ==two;
assert two.next ==one;
assert one.next ==four;
assert four.next == three;
assert three.next == null;

 swapTwoNode(l,two, three);
assert l.header.next == three;
assert three.next ==one;
assert one.next ==four;
assert four.next == two;
assert two.next == null;
assert l.size ==4;

}


