struct Node {
    int key;
    Node left;
    Node right;
    Node p;//precessor
    bit color; //black is 0
}

struct RBT {
    Node root;
}

Node newNode(int val) {
    Node n = new Node();
    n.key = val;
    n.left = null;
    n.right = null;
    n.p = null;
    n.color = 0;
    return n;
}

BST newBST() {
    BST bst = new BST();
    bst.root = null;
}

void left_rotate(RBT T, Node x) {
    y = x.right;
    x.right = y.left;
    if (y.left!=null)
        y.left.p = x;
    y.p = x.p;
    if (x.p ==null)
        x.p.left = y;
    else if (x == x.p.left)
        x.p.left = y;
    else 
        x.p.right = y;
    y.left =x;
    x.p = y;
}

void left_rotate(RBT T, Node x) {
    y = x.right;
    x.right = y.left;
    if (y.left!=null)
        y.left.p = x;
    y.p = x.p;
    if (x.p ==null)
        x.p.left = y;
    else if (x == x.p.left)
        x.p.left = y;
    else 
        x.p.right = y;
    y.left =x;
    x.p = y;
}

void right_rotate(RBT T, Node x) {
    y = x.left;
    x.left = y.right;
    if (y.right!=null)
        y.right.p = x;
    y.p = x.p;
    if (x.p ==null)
        x.p.right = y;
    else if (x == x.p.right)
        x.p.right = y;
    else 
        x.p.left = y;
    y.right =x;
    x.p = y;
}

void insert(RBT T, Node z) {
    y = null;
    x = T.root;
    while (x!= null) {
        y=x;
        if (z.key < x.key)
            x = x.left;
        else
            x = x.right;
    }
    z.p = y;
    if (y==null)
        T.root = z;
    else if (z.key < y.key)
        y.left = z;
    else 
        y.right z;
    z.left = null;
    z.right = null;
    z.color = 1; //red
    insert_fixup(T,z);
}

void insert_fixup(RBT T, Node z) {
    while (z.p.color ==1) {
        if (z.p == z.p.p.left) {
            y = z.p.p.right;
            if (y.color ==1) {
                z.p.color = 0;
                y.color 0;
                z.p.p.color = 1;
                z = z.p.p;
            }
            else if (z==z.p.right) {
                z = z.p;
                left_rorate(T,z);
            }
            z.p.color = 0;
            z.p.p.color =1;
            right_rotate(T,z.p,z);
        }
        
        else {
            y = z.p.p.left;
            if (y.color ==1) {
                z.p.color = 0;
                y.color 0;
                z.p.p.color = 1;
                z = z.p.p;
            }
            else if (z==z.p.left) {
                z = z.p;
                right_rorate(T,z);
            }
            z.p.color = 0;
            z.p.p.color =1;
            left_rotate(T,z.p,z);
        }
    }
    T.root.color = 0;  
}

void transplant(RBT T, Node u, Node v) {
    if (u.p==null)
        T.root =v;
    else if (u = u.p.left)
        u.p.left = v;
    else 
        u.p.right =v;
    v.p = u.p;  
}

void delete(RBT T,Node z) {
    Node y=z;
    Node x=null;
    bit y_color = y.color;
    if (z.left == null) {
        x = z.right;
        transplant(T,z,z.right);
    }
    else if (z.right ==null) {
        x = z.left;
        transplant(T,z,z.left);
    }
    else {
        y = minimum(z.right);
        y_color = y.color;
        x = y.right;
        if (y.p==z)
            x.p = y;
        else {
            transplant(T,y,y.right);
        y.right = z.right;
        y.right.p = y;
        }
        transplant(T,z,y);
        y.left = z.left;
        y.left.p = y;
        y.color =z.color;
    }
    if (y_color ==0)
    delete_fixup(T,x);
}

void delete_fixup(RBT T,Node z) {
    while (x !=T.root && x.color ==0) {
        if (x==x.p.left) {
            Node w = x.p.left;
            if (w.color == 1) {
                w.color = 0;
                x.p.color = 1;
                left_rotate(T,x.p);
                w = x.p.right;
            }
            if (w.left.color == 0 && w.right.color == 0) {
                w.color = 1;
                x = x.p;
            }
            else if (w.right.color ==0) {
                w.left.color = 0;
                w.color = 1;
                right_rotate(T,w);
                w = x.p.right;
                
                w.color = x.p.color;
                x.p.color = 0;
                w.right.color = 0;
                left_rotate(T,x.p);
                x = T.root;
            }
        }
        else {
            Node w = x.p.right;
            if (w.color == 1) {
                w.color = 0;
                x.p.color = 1;
                right_rotate(T,x.p);
                w = x.p.right;
            }
            if (w.right.color == 0 && w.left.color == 0) {
                w.color = 1;
                x = x.p;
            }
            else if (w.left.color ==0) {
                w.right.color = 0;
                w.color = 1;
                left_rotate(T,w);
                w = x.p.left;
                
                w.color = x.p.color;
                x.p.color = 0;
                w.left.color = 0;
                right_rotate(T,x.p);
                x = T.root;
            }
        }
        x.color = 0;
    }
}